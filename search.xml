<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[时光啊，时光]]></title>
      <url>/archives/2019self-summary.html</url>
      <content type="html"><![CDATA[<p>当我们专心忙碌在自己的日常生活中时，往往最容易忽略的是时间的流逝，回过神时，却发现时间已经流逝了许久。此时，我们会不禁的感叹 “时间过得好快呀”，也正如孔夫子言 “逝者如斯夫，不舍昼夜”！</p>
<p>又是一年时光，2019 转眼就从指间溜走。回顾我的 2019，似乎过得很匆忙。</p>
<p>六月前，我还是一名学生，自 2018 年 11 月定题以来，一直忙碌于毕业设计的开发和毕业论文的撰写。与此同时，终于顺利的完成了我第二次参与的市级大学生创新创业项目比赛最终答辩，并且拿到了不错的成绩。因为我在此次大创比赛队伍中主要负责技术开发部分，并且我们的指导老师又是我的毕业设计的导师，所以我的毕业设计题目便是此次大创比赛题目的延伸和扩展。在导师的悉心指导下，不仅大创取得了不错的成绩，而且我的毕业论文被推荐为优秀毕业论文。我忘不了导师耐心指导我们如何写好、改好大创结项报告的那段时光；我还忘不了导师牺牲自己休息时间为我修改论文，一页一页幻灯片的指导我如何更好的完成答辩的时光；我更忘不了当我毕业后导师还在为我的毕业论文推优的事情忙前忙后的样子。从大创立项以来到大创结项，从毕业论文选题到毕业答辩结束后，导师一直孜孜不倦，悉心指导我和我所在的大创团队，此刻，我好想对导师说 “这些岁月，承蒙您指导了。您辛苦了，谢谢您”。我能顺立完成毕业设计离不开我的大创团队。非常荣幸，我遇到了世界上最好的队友。我们分工明确，各司其职；我们团结互助，和睦有爱。我们一起奋斗过，一起欢笑过，一起焦虑过，一起失落过，但我们从来没有放弃过。和他们在一起共同为大创项目努力的时光，是我最宝贵的校园回忆。</p>
<p>忙碌于大创和毕设这两件主要的事情外，我的 2019 年上半年，还在为致力于推动 <code>Youngon ECO</code> （ecosystem, 生态系统）的发展而做努力。从 2019 年开学以来，我便创建了 <code>Youngon Group</code>，然后着手生态的建设。二月到四月期间，我分别完成了以下项目：</p>
<ul>
<li><code>YG-Auth</code>（统一认证系统）</li>
<li><code>YG-Auth-Docking</code>（统一认证系统对接）</li>
<li><code>YG-Member</code>（历届站员名单）</li>
<li><code>YG-Dynamic</code>（动态空间）</li>
</ul>
<p>进行中还未完成，需要传承给后面几届的同学去做的有以下项目：</p>
<ul>
<li><code>YG-OA</code>（OA 系统）</li>
<li><code>YG-Workstation</code> （作品站）</li>
<li><code>iYoungon</code> (iYoungon 安卓客户端更新迭代)</li>
<li><code>iYoungon-MP</code> (iYoungon 小程序更新迭代)</li>
<li><code>iYou</code> (iYoungon 的升级版，含对外功能，拟对外推广APP)</li>
</ul>
<p>之所以要推动发展 <code>Youngon ECO</code>，一是因为 Youngon 的 “内忧外患”，为了 Youngon 能长久发展下去，找到自己的方向，壮大自己的内部力量，和提高自己内部实力，并且顺便提高工作效率；二是因为我想要去做，我想为 Youngon 做一些自己力所能及的事情。四年来，我从 Youngon 学到的东西太多，一直在获得，从未给予过 Youngon 什么，Youngon 使我变得更好，我也希望 Youngon 能变得更好。</p>
<p>往往理想很丰满，现实很骨感。推动 <code>Youngon ECO</code> 的发展并不容易，身边的人有的支持，有的反对，有的中立。我也曾感到迷茫，感到困苦，去思考这件事情是否真的有意义，是否真的值得我坚持下去。我曾一时冲动，差点真的就要放弃了。但是每当我看到 iYoungon 上面值班的人的名字，看到动态空间里有人还在发动态，有人给我发的动态点赞时，我就开心的不得了，混身充满了动力，感觉自己的付出被别人肯定了一样，给了我坚持下去的信心。2019 年已经坚持下来了，我想 2020 年也会，只不过主力已经不再是我，而是后届的 Youngoner！</p>
<p>六月中下旬，无一例外，一年一度的毕业季如约而至！我就这样毕业了。度过了我完整的大学四年时光！大学四年，我最热爱最感谢的两个大家庭便是计科1501班与 Youngon。能够结识这么多优秀、善良、热情、可爱的家人和朋友，我真的很幸运！四年来，感谢他们的帮助与包容。</p>
<p>毕业后，我，回家了。在家待了一个月后，便出来寻找工作。第一站便是北上去北京。来到北京后，先后两次面试了百度，第一次因为自己准备不足没有通过，第二次虽然通过了笔试和一面，但是因为自己已经毕业了而我参加的是校招，不符合规定，因此被刷了下来。之后又陆陆续续投递了很多公司，因为自己是毕业生的事实，导致校招直接被刷，许多社招被工作经验不符合要求为由而刷了下来。我就这样在北京漂泊了快一个月。之后被亲戚介绍到北京中关村附近的一家电子芯片公司工作。在这里，虽然每天上下班要导两趟地铁，大概需要一个多小时的时间，但我的工作很轻松，很舒适。就这样，我参与了一个多月的北京地铁早高峰和晚高峰。工作了一个月后，便向公司经理提出了离职。当然，离职原因并不是因为上下班要挤两小时地铁。离职后，接近半个多月的空档期疯狂投简历，但是能收到面试的却屈指可数。最终，在抱着试一试的态度下和柴少一起去天津面试，结果，就真的在天津上班了。</p>
<p>2019 年最后一个周末，柴少大清早六点多陪我一起去医院看病，替我背书包，拿东西，找检查的科室等等。检查结果出来后，自己不敢看，先让他看完后告诉我。幸好，一切都很正常，正如柴少所言 “你这健康的很”，借他吉言。2019 年来，他帮助我很多，照顾我许多，我不善于表达，生活中很少向他表达感谢，因此在这里向他表达衷心的感谢，阿里嘎多。</p>
<p>2019 年，我追了唯一的一部电视剧《我在未来等你》，真的很好看。同时，动漫追了《鬼灭之刃》，和《我的英雄学院》全系列，算是 2019 年最良心的动漫没有之一。</p>
<p>我的 2019 年，过的很匆忙。我依稀记得送大四那天下午活动，他们问我 “大学四年, 您觉得您最大的遗憾是什么”，我回答说，“没有遗憾。我最大的遗憾就是没有遗憾”。当时在回答时我仔细回顾过自己的大学四年，自我感觉 “良好”，好像从未有过所谓 “遗憾” 的事情，因为对我而言，像所谓 “没通过四六级”，“没有找到女朋友”，“没有坚持做一件事情”等等什么的，并不算“遗憾”的事情。我认为自己想要做但没有去做的事情才算遗憾的事情，所以做出了那样的回答。现在回想起来，我发现我最大的遗憾好像不是没有遗憾。在工作了之后，我发现了一个现象，因为并不是每天都能见到的缘故，昔日的好友在渐渐减少联系后逐渐变得陌生，最终大家都变成了陌生人。这一现象渐渐的导致我现在一直有一种感觉，觉得自己很孤独，没有人能和我促膝长谈，推心置腹，听我内心的真实想法。我与生俱来就社恐，不善言谈和交际，但我一直在努力改变这一缺点，因此我结识了很多朋友，但是由于自己没有维系住那些友谊，这些朋友也慢慢的渐行渐远。如果还能在重新回答一次，我想说“我最大的遗憾是没有维系住我的友谊”，因为这是我想要去做而没有做的事情！</p>
<p>常言道，成长的道路上哪能不孤独，要想有所成就就得要耐得住寂寞。是啊，但是有志同道合的朋友一起拼搏不是更好嘛！</p>
<p>2019 年已经过去，2020 年已经到来，每一天都是新的自己，加油，希望在前进的道路上重新认识志同道合的你们，冲向更远的将来， Plus Ultra!</p>
]]></content>
      
        <categories>
            
            <category> 流水账 | 总结类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> self-summary </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记百度前端一面]]></title>
      <url>/archives/Baidu-FE-interview.html</url>
      <content type="html"><![CDATA[<p>2019年7月31日，这天烈日当空，骄阳似火，我孤身前往北京百度科技园，参加百度前端社招面试。</p>
<p>谜之自信的我，从不做面试前的准备，刷面试题对我来说是不可能的，顶多也就瞟两眼，不会花很多时间在这个上面，更愿意把时间都用来真正实践中项目中。然鹅我还是<code>Too young Too naive</code>🤦‍！</p>
<p>到了北京百度科技园，进入K2大厅，首先映入眼帘的是大厅中央的AI机器人，然后就是百度的Logo，环视一周，感觉不愧是百度在北京的总部，K2的大厅要比网易在北京研发中心的大厅大一点。距离约定好的面试时间还有一点时间，我被安排在右边的沙发上等待面试官。就在此时，我拿起我的荣耀手机，随手拍了一张大厅的照片。如下</p>
<div style="width:100%;display:flex;flex-direction:column;justify-content:center;text-align:center;"><br><br>  <img src="https://pub.wangxuefeng.com.cn/asset/blogthumbnail/baiduInterview/hall.jpg" style="width:100%;max-width:600px;margin: 5px auto;"><br><br></div>

<p>到了约定的时间，面试官带我通过门禁，进入<code>后堂</code>，前往面试的小桌边。扫视一周，发现周围全都是面试或者讨论问题的人，我，只是这芸芸众生中的一员。</p>
<p>接下来开始正式面试了，面试官手拿Mac，上面有我的电子简历，开始询问问题，我也开始回答问题。</p>
<p>还是那句话，我真的是<code>Too young Too naive</code>，面试官问的问题都是能百度到的面试题，而我就是没有去刷。虽然一些问题大概是知道的，但是原理性的东西东很模糊，回答起来都很笼统，可越是笼统的回答，面试官就越是要详细的去问，这个时候，就只能乖乖的回答<em>I don’t Know</em>了，倘若稍加要蒙混过关，那么就是诚信问题了。经过这样<code>宁静而又祥和的</code>面试后，面试结果也就心知肚明了。归根到底，还是自己基础不扎实，没有追根溯源，搞明白原理。所以学习一定要有探索精神，要探究本源，弄清原理，不能糊弄自己，要对的起自己付出的时间。</p>
<p>好了，废话不多说，直接上题吧：</p>
<ul>
<li><p>1.你在上一家公司实习用的什么前端框架？</p>
<blockquote>
<p>Angular</p>
</blockquote>
</li>
<li><p>2.你认为 Angular 和 Vue 各自的优缺点在什么地方？</p>
<blockquote>
<p>Angular，出生比 Vue 早，相对 Vue 要更加”老练”, 适合做大型 Web 项目。Angular 采用“脏值检测”的方式，数据发生变更后，对于所有的数据和视图的绑定关系进行一次检测，识别是否有数据发生了改变，有变化进行处理，可能进一步引发其他数据的改变，所以这个过程可能会循环几次，一直到不再有数据变化发生后，将变更的数据发送到视图，更新页面展现。</p>
<p>Vue，定位用于中小型前端项目，相对于 Angular 更加年轻。Vue 使用 Object.defineProperty() 方法，监控对数据的操作，从而可以自动触发数据同步。并且，由于是在不同的数据上触发同步，可以精确的将变更发送给绑定的视图，而不是对所有的数据都执行一次检测。</p>
</blockquote>
</li>
<li><p>3.那你说说 Angular 的 “脏值检测” 吧，会不会有性能问题？</p>
<blockquote>
<p>Angular 团队通过对 <a href="https://github.com/angular/angular/tree/master/packages/zone.js" target="_blank" rel="noopener">zone.js</a> 封装，实现了 脏检查机制（Change Detection 或 Dirty Checking）。<br>Angular 默认是脏检查方法是从根组件开始，遍历所有的子组件进行脏检查。</p>
<p>触发条件</p>
<ul>
<li>Ajax 请求， </li>
<li>Timeout 延迟事件，</li>
<li>鼠标事件</li>
</ul>
<p>触发脏检测的目的就是检测视图(DOM)有没有发生变化，方法就是比较 双向绑定中 view 和 model 是否一致。</p>
<p>脏检测的效率必然不会太高，但也不会很慢。性能优化的话，可以从</p>
<ul>
<li>减少逻辑代码的复杂程度</li>
<li>减少 Event Handler（可做节流和防抖）</li>
<li>降低 DOM 树复杂度<br>等几方面进行。</li>
</ul>
<p>具体可参考文章</p>
<ul>
<li><a href="https://www.jianshu.com/p/850f0f76e908" target="_blank" rel="noopener">如何理解angular的脏检查</a></li>
<li><a href="https://blog.csdn.net/wf19930209/article/details/83515873" target="_blank" rel="noopener">Angular性能优化之脏检测</a></li>
</ul>
</blockquote>
</li>
<li><p>4.为什么说 Vue 定位于中小型前端项目，有什么例子能证明 Vue 不能做或者做不好大型项目吗？</p>
<blockquote>
<p>Vue.js 官网这样介绍自己：<br>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。<strong>与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用</strong>。</p>
<p>具体有什么例子能证明 Vue 不能做或者做不好大型项目暂时还不太清楚，但是能确定的是 Vue 生而为“简”。与 React 的简单对比如下图所示：</p>
</blockquote>
<div style="width:100%;display:flex;flex-direction:column;justify-content:center;text-align:center;"><br><br>  <img src="https://pub.wangxuefeng.com.cn/asset/blogthumbnail/baiduInterview/vue&react1.png" style="width:100%;max-width:500px;margin: 5px auto;"><br><br>  <img src="https://pub.wangxuefeng.com.cn/asset/blogthumbnail/baiduInterview/vue&react2.png" style="width:100%;max-width:500px;margin: 5px auto;"><br><br>  <p>（图片来自<a href="https://www.jianshu.com/p/b7cd52868e95" target="_blank">vue和react的区别之我见</a>）</p><br><br></div>

<blockquote>
<p>具体可参考</p>
<ul>
<li><a href="https://baijiahao.baidu.com/s?id=1608099200125495014&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">React.js与Vue.js：流行框架的比较</a></li>
<li><a href="https://www.jianshu.com/p/b7cd52868e95" target="_blank" rel="noopener">vue和react的区别之我见</a></li>
</ul>
</blockquote>
</li>
<li><p>5.说说 Vue 的双向绑定原理吧。</p>
<blockquote>
<p>Vue.js 官网解释如下：</p>
<p>当你把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter。Object.defineProperty 是 ES5 中一个无法 shim 的特性，这也就是 Vue 不支持 IE8 以及更低版本浏览器的原因。</p>
<p>这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在属性被访问和修改时通知变更。这里需要注意的是不同浏览器在控制台打印数据对象时对 getter/setter 的格式化并不同，所以建议安装 vue-devtools 来获取对检查数据更加友好的用户界面。</p>
<p>每个组件实例都对应一个 watcher 实例，它会在组件渲染的过程中把“接触”过的数据属性记录为依赖。之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。</p>
</blockquote>
<div style="width:100%;display:flex;flex-direction:column;justify-content:center;text-align:center;"><br><br>  <img src="https://pub.wangxuefeng.com.cn/asset/blogthumbnail/baiduInterview/vue.png" style="width:100%;max-width:500px;margin: 5px auto;"><br><br>  <p>（图片来自<a href="https://cn.vuejs.org/v2/guide/reactivity.html" target="_blank">Vue.js 官网 深入响应式原理</a>）</p><br><br></div>


</li>
</ul>
<blockquote>
<p>自己的理解：Vue 通过 Object.defineProperty() 将传入参数的 data 的属性全部转为 getter/setter。在getter/setter 的内部实现对数据监控和拦截，并结合发布者-订阅者模式，在数据变动时发布消息给订阅者，触发相应的监听回调，并更新视图。</p>
</blockquote>
<ul>
<li><p>6.能说说Object.defineProperty()这个方法吗，还有在 Vue 的双向绑定原理中 getter/setter 里面具体做了什么？ </p>
<blockquote>
<p>Object.defineProperty(obj, prop, descriptor)</p>
<p>接收三个参数，分别是</p>
<ul>
<li>obj 要在其上定义属性的对象</li>
<li>prop 要定义或修改的属性的名称</li>
<li>descriptor 将被定义或修改的属性描述符</li>
</ul>
<p>返回 被传递给函数的对象</p>
<p>关于 <code>descriptor</code>, 称为属性描述符，对象里目前存在的属性描述符有两种主要形式：<strong>数据描述符</strong>和<strong>存取描述符</strong>。<br><br><strong>数据描述符</strong>是一个具有值的属性，该值可能是可写的，也可能不是可写的。<br><br><strong>存取描述符</strong>是由 getter-setter 函数对描述的属性。<br><br><strong>描述符必须是这两种形式之一；不能同时是两者</strong>。</p>
<p>数据描述符和存取描述符均具有以下可选键值</p>
<p>(默认值是在使用Object.defineProperty()定义属性的情况下)：</p>
<ul>
<li>configurable 当且仅当该属性的 configurable 为 true 时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。<code>默认为 false</code>。</li>
<li>enumerable 当且仅当该属性的enumerable为true时，该属性才能够出现在对象的枚举属性中。<code>默认为 false</code>。</li>
</ul>
<p>数据描述符同时具有以下可选键值：</p>
<ul>
<li>value 该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。<code>默认为 undefined</code>。</li>
<li>writable 当且仅当该属性的writable为true时，value才能被赋值运算符改变。<code>默认为 false</code>。  </li>
</ul>
<p>存取描述符同时具有以下可选键值：</p>
<ul>
<li>get 一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传入this对象（由于继承关系，这里的this并不一定是定义该属性的对象）。<code>默认为 undefined</code>。</li>
<li>set 一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值。<code>默认为 undefined</code>。</li>
</ul>
<p><strong>如果一个描述符不具有value,writable,get 和 set 任意一个关键字，那么它将被认为是一个数据描述符。如果一个描述符同时有(value或writable)和(get或set)关键字，将会产生一个异常</strong>。</p>
<p>如果同时要定义或修改多个属性，可以使用 <code>Object.defineProperties(obj, props)</code><br>如：</p>
<pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token string">'property1'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        value<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        writable<span class="token punctuation">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token string">'property2'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        value<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span>
        writable<span class="token punctuation">:</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
      <span class="token comment" spellcheck="true">// etc. etc.</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Vue 的双向绑定原理中 getter/setter 里面具体做了什么，看看源码：</p>
<p>源码来自：<a href="https://github.com/vuejs/vue/blob/dev/src/core/observer/index.js" target="_blank" rel="noopener">https://github.com/vuejs/vue/blob/dev/src/core/observer/index.js</a></p>
</blockquote>
<pre class=" language-js"><code class="language-js">
  <span class="token comment" spellcheck="true">// ...</span>
  <span class="token comment" spellcheck="true">/**
  * Define a reactive property on an Object.
  */</span>
  <span class="token keyword">export</span> <span class="token keyword">function</span> defineReactive <span class="token punctuation">(</span>
    obj<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>
    key<span class="token punctuation">:</span> string<span class="token punctuation">,</span>
    val<span class="token punctuation">:</span> any<span class="token punctuation">,</span>
    customSetter<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token operator">?</span>Function<span class="token punctuation">,</span>
    shallow<span class="token operator">?</span><span class="token punctuation">:</span> boolean
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> property <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>property <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span>configurable <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// cater for pre-defined getter/setters</span>
    <span class="token keyword">const</span> getter <span class="token operator">=</span> property <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span><span class="token keyword">get</span>
    <span class="token keyword">const</span> setter <span class="token operator">=</span> property <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span><span class="token keyword">set</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>getter <span class="token operator">||</span> setter<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      val <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> childOb <span class="token operator">=</span> <span class="token operator">!</span>shallow <span class="token operator">&amp;&amp;</span> <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> reactiveGetter <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> value <span class="token operator">=</span> getter <span class="token operator">?</span> getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">:</span> val
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>childOb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            childOb<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">dependArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> value
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> reactiveSetter <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> value <span class="token operator">=</span> getter <span class="token operator">?</span> getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">:</span> val
        <span class="token comment" spellcheck="true">/* eslint-disable no-self-compare */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">===</span> value <span class="token operator">||</span> <span class="token punctuation">(</span>newVal <span class="token operator">!==</span> newVal <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">/* eslint-enable no-self-compare */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> customSetter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">customSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// #7981: for accessor properties without setter</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>getter <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>setter<span class="token punctuation">)</span> <span class="token keyword">return</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>setter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          setter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          val <span class="token operator">=</span> newVal
        <span class="token punctuation">}</span>
        childOb <span class="token operator">=</span> <span class="token operator">!</span>shallow <span class="token operator">&amp;&amp;</span> <span class="token function">observe</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span>
        dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">/**
  * Collect dependencies on array elements when the array is touched, since
  * we cannot intercept array element access like property getters.
  */</span>
  <span class="token keyword">function</span> dependArray <span class="token punctuation">(</span>value<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> e<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e <span class="token operator">=</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>__ob__ <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>__ob__<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">dependArray</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment" spellcheck="true">// ...</span>
</code></pre>
<blockquote>
<p>其中 get </p>
<pre class=" language-js"><code class="language-js">  <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> reactiveGetter <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> getter <span class="token operator">?</span> getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">:</span> val
    <span class="token comment" spellcheck="true">// 判断 property 是否已经具有 getter</span>
    <span class="token comment" spellcheck="true">// 如果已经具有 getter，则调用该 getter</span>
    <span class="token comment" spellcheck="true">// 否则 value 为该属性值</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// Dep 为一个订阅器，判断是否需要添加订阅者，也可以叫做收集依赖</span>
      dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token comment" spellcheck="true">// 添加订阅者 收集依赖</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>childOb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 如果需要添加子订阅者</span>
        childOb<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// childOb.dep 为一个子订阅器，在子订阅器添加订阅者</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">// 如果 value 是数组的话</span>
          <span class="token function">dependArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
          <span class="token comment" spellcheck="true">// （递归）添加数组订阅者，监听数组的变化</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> value
    <span class="token comment" spellcheck="true">// 返回 value</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre>
<p>set</p>
</blockquote>
<pre class=" language-js"><code class="language-js"><span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> reactiveSetter <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> value <span class="token operator">=</span> getter <span class="token operator">?</span> getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">:</span> val
  <span class="token comment" spellcheck="true">// 获取修改前的 value</span>

  <span class="token comment" spellcheck="true">/* eslint-disable no-self-compare */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">===</span> value <span class="token operator">||</span> <span class="token punctuation">(</span>newVal <span class="token operator">!==</span> newVal <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 如果 新的值与修改前相同 直接返回</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token comment" spellcheck="true">/* eslint-enable no-self-compare */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> customSetter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 如果在生产环境下并且具有 customSetter， 则调用 customSetter</span>
    <span class="token function">customSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment" spellcheck="true">// #7981: for accessor properties without setter</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>getter <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>setter<span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token comment" spellcheck="true">// 如果没有 setter 访问者属性的话直接返回</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>setter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 如果 property 已经有 setter，调用 setter</span>
    setter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 否则 进行赋值</span>
    val <span class="token operator">=</span> newVal
  <span class="token punctuation">}</span>
  childOb <span class="token operator">=</span> <span class="token operator">!</span>shallow <span class="token operator">&amp;&amp;</span> <span class="token function">observe</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span>
  <span class="token comment" spellcheck="true">// （递归）更新子订阅器</span>
  dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment" spellcheck="true">// 向订阅者发布更新，更新视图</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>源码传送门</p>
<ul>
<li><a href="https://github.com/vuejs/vue/blob/dev/src/core/observer/index.js" target="_blank" rel="noopener">双向绑定具体实现 源码</a></li>
<li><a href="https://github.com/vuejs/vue/blob/dev/src/core/observer/watcher.js" target="_blank" rel="noopener">Watcher 的具体实现 源码</a></li>
<li><a href="https://github.com/vuejs/vue/blob/dev/src/core/observer/dep.js" target="_blank" rel="noopener">Dep 的具体实现 源码</a></li>
</ul>
<p>简单总结一下就是，在 getter 中添加订阅，收集依赖， 在 setter 中发布订阅，更新依赖和视图</p>
</blockquote>
</li>
<li><p>7.说说 Vue 中 watch 和 computed 的区别。</p>
<blockquote>
<ul>
<li><a href="https://cn.vuejs.org/v2/guide/computed.html" target="_blank" rel="noopener">vue 官网的解释</a></li>
<li><p>简单总结一下：</p>
<ul>
<li>computed: 计算属性，用于复杂的逻辑计算，并且基于它们的响应式依赖将计算结果进行缓存以减少性能开销，如果不希望有缓存，可以使用方法来替代。计算属性默认只有 getter ，不过在需要时也可以提供一个 setter。计算属性不可在 data 里面定义, 。</li>
<li>watch: 侦听器, 用于在数据变化时需要执行异步或开销较大的操作时，每个 watch 具有 oldValue 和 newValue 参数；可以设置中间状态，这些都是计算属性无法做到的。</li>
</ul>
</li>
<li><p>具体实现 computed:</p>
</li>
</ul>
</blockquote>
<pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// src/core/instance/state.js</span>

  <span class="token comment" spellcheck="true">// 初始化计算属性</span>
  <span class="token keyword">function</span> initComputed <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> computed<span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token comment" spellcheck="true">// 遍历 computed 计算属性</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>
      <span class="token comment" spellcheck="true">// 创建 Watcher 实例</span>
      <span class="token comment" spellcheck="true">// create internal watcher for the computed property.</span>
      watchers<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> getter <span class="token operator">||</span> noop<span class="token punctuation">,</span> noop<span class="token punctuation">,</span> computedWatcherOptions<span class="token punctuation">)</span>

      <span class="token comment" spellcheck="true">// 创建属性 并将提供的函数将用作属性的 getter，</span>
      <span class="token comment" spellcheck="true">// 最终 computed 与 data 会一起混合到 vm 下，所以当 computed 与 data 存在重名属性时会抛出警告</span>
      <span class="token function">defineComputed</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> userDef<span class="token punctuation">)</span>
      <span class="token operator">...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">export</span> <span class="token keyword">function</span> defineComputed <span class="token punctuation">(</span>target<span class="token punctuation">:</span> any<span class="token punctuation">,</span> key<span class="token punctuation">:</span> string<span class="token punctuation">,</span> userDef<span class="token punctuation">:</span> Object <span class="token operator">|</span> Function<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token comment" spellcheck="true">// 创建 get set 方法</span>
    sharedPropertyDefinition<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token function">createComputedGetter</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    sharedPropertyDefinition<span class="token punctuation">.</span><span class="token keyword">set</span> <span class="token operator">=</span> noop
    <span class="token operator">...</span>
    <span class="token comment" spellcheck="true">// 创建属性，并初始化 getter setter</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> sharedPropertyDefinition<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> createComputedGetter <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> computedGetter <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> watcher <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_computedWatchers <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_computedWatchers<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>watcher<span class="token punctuation">.</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">// watcher 暴露 evaluate 方法用于取值操作</span>
          watcher<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 判断是否处于依赖收集状态</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          watcher<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> watcher<span class="token punctuation">.</span>value
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>无论是属性还是计算属性，都会生成一个对应的 watcher 实例。</p>
</blockquote>
<pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// src/core/observer/watcher.js</span>

  <span class="token comment" spellcheck="true">// 当获取计算属性时，就会进到这个 getter 方法</span>
  <span class="token keyword">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// this 指的是 watcher 实例</span>
    <span class="token comment" spellcheck="true">// 将当前 watcher 实例暂存到 Dep.target，这就表示开启了依赖收集任务</span>
    <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> value
    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 在执行定义计算属性的函数时，会触发属性和计算属性的 getter</span>
      <span class="token comment" spellcheck="true">// 在这个执行过程中，就可以收集到定义计算属性的依赖了</span>
      value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`getter for watcher "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> e
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">traverse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token comment" spellcheck="true">// 结束依赖收集任务</span>
      <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cleanupDeps</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> value
  <span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>dep</p>
</blockquote>
<pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// src/core/observer/dep.js</span>

  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> target<span class="token punctuation">:</span> <span class="token operator">?</span>Watcher<span class="token punctuation">;</span>
    id<span class="token punctuation">:</span> number<span class="token punctuation">;</span>
    subs<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Watcher<span class="token operator">></span><span class="token punctuation">;</span>

    constructor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> uid<span class="token operator">++</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    addSub <span class="token punctuation">(</span>sub<span class="token punctuation">:</span> Watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    removeSub <span class="token punctuation">(</span>sub<span class="token punctuation">:</span> Watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">,</span> sub<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    depend <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Dep<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">addDep</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    notify <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> subs <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> subs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 更新 watcher 的值，与 watcher.evaluate() 类似，</span>
        <span class="token comment" spellcheck="true">// 但 update 是给依赖变化时使用的，包含对 watch 的处理</span>
        subs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">// 当首次计算 computed 属性的值时，Dep 将会在计算期间对依赖进行收集</span>
  Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">const</span> targetStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">export</span> <span class="token keyword">function</span> pushTarget <span class="token punctuation">(</span>_target<span class="token punctuation">:</span> Watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 在一次依赖收集期间，如果有其他依赖收集任务开始（比如：当前 computed 计算属性嵌套其他 computed 计算属性），</span>
    <span class="token comment" spellcheck="true">// 那么将会把当前 target 暂存到 targetStack，先进行其他 target 的依赖收集，</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> targetStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span>
    Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> _target
  <span class="token punctuation">}</span>

  <span class="token keyword">export</span> <span class="token keyword">function</span> popTarget <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 当嵌套的依赖收集任务完成后，将 target 恢复为上一层的 Watcher，并继续做依赖收集</span>
    Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> targetStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>总结一下依赖收集、动态计算的流程：</p>
<ul>
<li>data 属性初始化 getter setter</li>
<li>computed 计算属性初始化，提供的函数将用作属性的 getter</li>
<li>当首次获取计算属性的值时，Dep 开始依赖收集</li>
<li>在执行 getter 方法时，如果 Dep 处于依赖收集状态，则判定 该属性为 计算属性 的依赖，并建立依赖关系</li>
<li><p>当 所依赖的属性 发生变化时，根据依赖关系，触发 计算属性的函数 重新计算</p>
<p>参考文章：<a href="https://segmentfault.com/a/1190000010408657" target="_blank" rel="noopener">深入理解 Vue Computed 计算属性</a></p>
</li>
<li><p>具体实现 watch:</p>
</li>
</ul>
</blockquote>
<pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 初始化</span>
  <span class="token comment" spellcheck="true">// initState -> initWatch</span>

  <span class="token keyword">function</span> <span class="token function">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">...</span> <span class="token comment" spellcheck="true">// 其他处理</span>
    <span class="token function">initState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token operator">...</span> <span class="token comment" spellcheck="true">// 解析模板，生成DOM 插入页面</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> initState <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span> <span class="token comment" spellcheck="true">// 处理 data，props，computed 等数据</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>watch <span class="token operator">&amp;&amp;</span> opts<span class="token punctuation">.</span>watch <span class="token operator">!==</span> nativeWatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">initWatch</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>watch<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> initWatch <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> watch<span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> watch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> handler <span class="token operator">=</span> watch<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> handler<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> handler<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment" spellcheck="true">/**
  * Strict object type check. Only returns true
  * for plain JavaScript objects.
  */</span>
  <span class="token keyword">function</span> isPlainObject <span class="token punctuation">(</span>obj<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> boolean <span class="token punctuation">{</span>
    <span class="token keyword">return</span> _toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Object]'</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> createWatcher <span class="token punctuation">(</span>
    vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span>
    expOrFn<span class="token punctuation">:</span> string <span class="token operator">|</span> Function<span class="token punctuation">,</span>
    handler<span class="token punctuation">:</span> any<span class="token punctuation">,</span>
    options<span class="token operator">?</span><span class="token punctuation">:</span> Object
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// expOrFn 是 key，handler 可能是对象</span>

    <span class="token comment" spellcheck="true">// 监听属性的值是一个对象，包含handler，deep，immediate</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      options <span class="token operator">=</span> handler
      handler <span class="token operator">=</span> handler<span class="token punctuation">.</span>handler
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> handler <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      handler <span class="token operator">=</span> vm<span class="token punctuation">[</span>handler<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$watch <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>
      expOrFn<span class="token punctuation">:</span> string <span class="token operator">|</span> Function<span class="token punctuation">,</span>
      cb<span class="token punctuation">:</span> any<span class="token punctuation">,</span>
      options<span class="token operator">?</span><span class="token punctuation">:</span> Object
    <span class="token punctuation">)</span><span class="token punctuation">:</span> Function <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// expOrFn 是 监听的 key，cb 是监听的回调，options 是 监听的所有选项</span>
      <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      options<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token keyword">const</span> watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 设定了立即执行，马上执行回调</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> watcher<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">handleError</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`callback for immediate watcher "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>watcher<span class="token punctuation">.</span>expression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token keyword">function</span> unwatchFn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        watcher<span class="token punctuation">.</span><span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// ...</span>
    constructor <span class="token punctuation">(</span>
      vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span>
      expOrFn<span class="token punctuation">:</span> string <span class="token operator">|</span> Function<span class="token punctuation">,</span>
      cb<span class="token punctuation">:</span> Function<span class="token punctuation">,</span>
      options<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token operator">?</span>Object<span class="token punctuation">,</span>
      isRenderWatcher<span class="token operator">?</span><span class="token punctuation">:</span> boolean
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// ...</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm
      <span class="token keyword">this</span><span class="token punctuation">.</span>deep <span class="token operator">=</span> opt<span class="token punctuation">.</span>deep
      <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb
      <span class="token comment" spellcheck="true">// ...</span>
      <span class="token comment" spellcheck="true">// parse expression for getter</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> expOrFn <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> expOrFn
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> <span class="token function">parsePath</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// ...</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lazy
          <span class="token operator">?</span> undefined
          <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            
        <span class="token comment" spellcheck="true">// this.get 作用就是执行 this.getter 函数</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// ...</span>
    <span class="token keyword">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// this 指的是 watcher 实例</span>
      <span class="token comment" spellcheck="true">// 将当前 watcher 实例暂存到 Dep.target，这就表示开启了依赖收集任务</span>
      <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
      <span class="token keyword">let</span> value
      <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 触发 getter</span>
        value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`getter for watcher "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">throw</span> e
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">// 处理深度监听</span>
          <span class="token function">traverse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 结束依赖收集任务</span>
        <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cleanupDeps</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> value
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
    * Subscriber interface.
    * Will be called when a dependency changes.
    */</span>
    update <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">/* istanbul ignore else */</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sync<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">queueWatcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
    * Scheduler job interface.
    * Will be called by the scheduler.
    */</span>
    run <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>
          value <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">||</span>
          <span class="token comment" spellcheck="true">// Deep watchers and watchers on Object/Arrays should fire even</span>
          <span class="token comment" spellcheck="true">// when the value is the same, because the value may</span>
          <span class="token comment" spellcheck="true">// have mutated.</span>
          <span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>deep
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">// set new value</span>
          <span class="token keyword">const</span> oldValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value
          <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// cb 是监听回调</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span>cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`callback for watcher "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> seenObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment" spellcheck="true">/**
  * Recursively traverse an object to evoke all converted
  * getters, so that every nested property inside the object
  * is collected as a "deep" dependency.
  * 递归遍历一个对象以唤起所有转换的 getter，使对象内的每个嵌套属性被收集为“深层”依赖
  */</span>

  <span class="token keyword">export</span> <span class="token keyword">function</span> traverse <span class="token punctuation">(</span>val<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">_traverse</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> seenObjects<span class="token punctuation">)</span>
    seenObjects<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> _traverse <span class="token punctuation">(</span>val<span class="token punctuation">:</span> any<span class="token punctuation">,</span> seen<span class="token punctuation">:</span> SimpleSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> i<span class="token punctuation">,</span> keys
    <span class="token keyword">const</span> isA <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>isA <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> Object<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">||</span> val <span class="token keyword">instanceof</span> <span class="token class-name">VNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>__ob__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> depId <span class="token operator">=</span> val<span class="token punctuation">.</span>__ob__<span class="token punctuation">.</span>dep<span class="token punctuation">.</span>id
      <span class="token keyword">if</span> <span class="token punctuation">(</span>seen<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>depId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>
      seen<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>depId<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 不断递归深入读取对象，收集依赖</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isA<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// val[i] 就是读取值了，然后值的对象就能收集到 watch-watcher</span>
      i <span class="token operator">=</span> val<span class="token punctuation">.</span>length
      <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">_traverse</span><span class="token punctuation">(</span>val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> seen<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
      i <span class="token operator">=</span> keys<span class="token punctuation">.</span>length
      <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">_traverse</span><span class="token punctuation">(</span>val<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> seen<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>大概总结一下</p>
<ul>
<li>1.获取监听回调<ul>
<li>如果配置是个对象，就取 handler 字段</li>
<li>如果配置是函数，那么直接就是 监听回调</li>
<li>如果配置是字符串，从实例上获取函数</li>
</ul>
</li>
<li>2.调用 vm.$watch<ul>
<li>判断是否立即执行监听回调</li>
<li>每个 watch 配发 watcher</li>
<li>watcher 在结尾会立即执行一次 watcher.get，其中便会执行 getter，便会根据监听的 key，去实例上读取并返回，存放在 watcher.value 上</li>
<li>通过 traverse 实现深度监听</li>
<li>通过 watcher.update 实现更新，并调用 监听回调且传入新值和旧值</li>
</ul>
</li>
</ul>
<p>参考文章：<a href="https://segmentfault.com/a/1190000019684439" target="_blank" rel="noopener">【Vue原理】Watch - 源码版</a></p>
</blockquote>
</li>
<li><p>8.谈谈 XSS 和 CSRF 的区别。</p>
<blockquote>
<p>XSS (Cross Site Scripting)，即跨站脚本攻击，是一种常见于 Web 应用中的计算机安全漏洞。<br>恶意攻击者往 Web 页面里嵌入恶意的客户端脚本，当用户浏览此网页时，脚本就会在用户的浏览器上执行，进而达到攻击者的目的。<br>比如获取用户的 Cookie、导航到恶意网站、携带木马等。借助安全圈里面非常有名的一句话：</p>
<pre><code>  所有的输入都是有害的。
</code></pre><p>CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，XSS利用站点内的信任用户，而CSRF则通过伪装成受信任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。</p>
<p>详见</p>
<ul>
<li><a href="https://blog.csdn.net/weixin_39327883/article/details/89512217" target="_blank" rel="noopener">简述XSS和CSRF的概念和区别</a></li>
<li><a href="https://blog.csdn.net/zl834205311/article/details/81773511" target="_blank" rel="noopener">XSS及CSRF攻击防御</a></li>
</ul>
</blockquote>
</li>
<li><p>9.解决跨域的方式有哪些？</p>
<blockquote>
<ul>
<li>1.jsonp</li>
<li>2.PostMessage, PostMessage 是一个用于安全地使用跨源通信的方法。它允许来自不同源的脚本采用异步的方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递，相当于提供了一个受控的机制来安全地绕过浏览器的同源限制</li>
<li>3.CORS，服务端设置 <code>header( &quot;Access-Control-Allow-Origin:*&quot; );</code></li>
<li>4.代理, 开发环境下可以配置 webpack 的 devServer 下的 proxy，生产环境中可以通过配置nginx或apache等服务端程序代理转发请求</li>
</ul>
</blockquote>
</li>
<li><p>10.说说前端页面的性能优化吧。</p>
<blockquote>
<ul>
<li>1.尽量减少 HTTP 请求个数</li>
<li>2.使用 CDN（内容分发网络）</li>
<li>3.为文件头指定 Expires 或 Cache-Control ，使内容具有缓存性。</li>
<li>4.避免空的 src 和 href</li>
<li>5.使用 gzip 压缩内容</li>
<li>6.把 CSS 放到顶部</li>
<li>7.把 JS 放到底部</li>
<li>8.避免使用 CSS 表达式</li>
<li>9.将 CSS 和 JS 放到外部文件中</li>
<li>10.减少 DNS 查找次数</li>
<li>11.精简 CSS 和 JS</li>
<li>12.减少页面重定向</li>
<li>13.剔除重复的 JS 和 CSS</li>
<li>14.配置 ETags</li>
<li>15.使 AJAX 可缓存</li>
<li>16.尽早刷新输出缓冲</li>
<li>17.使用 GET 来完成 AJAX 请求</li>
<li>18.延迟加载</li>
<li>19.预加载</li>
<li>20.减少 DOM 元素个数</li>
<li>21.根据域名划分页面内容</li>
<li>22.尽量减少 iframe 的个数</li>
<li>23.避免 404</li>
<li>24.减少 Cookie 的大小</li>
<li>25.使用无 cookie 的域</li>
<li>26.减少 DOM 访问</li>
<li>27.用 <code>&lt;link&gt;</code> 代替 <code>@import</code></li>
<li>28.避免使用滤镜</li>
<li>29.优化图像</li>
<li>30.优化 CSS Spirite</li>
<li>31.favicon.ico要小而且可缓存</li>
<li>32.保持单个内容小于25K、</li>
<li>等等</li>
</ul>
</blockquote>
</li>
<li><p>11 具体说说<code>预加载</code>和<code>延迟加载</code>。</p>
<blockquote>
<ul>
<li><strong>预加载</strong>: 预加载是一种浏览器机制，使用浏览器空闲时间来预先下载/加载用户接下来很可能会浏览的页面/资源，当用户访问某个预加载的链接时，如果从缓存命中,页面就得以快速呈现</li>
<li><p><strong>延迟加载</strong>：通过对<code>script</code>标签设置<code>defer</code> 或 <code>async</code>属性实现异步加载。</p>
</li>
<li><p>async 与 defer 的异同：</p>
<ul>
<li>相同点：异步加载文件</li>
<li>不同点：<ul>
<li>async：虽然是异步加载，但当有多个脚本异步加载的时候，不一定先加载哪一个，加载顺序不一定</li>
<li>defer：加载顺序由第一个延迟脚本到最后一个延迟脚本</li>
<li>Chrome下的真实情况见<a href="https://segmentfault.com/a/1190000006778717" target="_blank" rel="noopener">浅谈script标签的defer和async</a>,<pre><code>所以，通俗来讲，chrome 浏览器首先会请求HTML文档，然后对其中的各种资源调用相应的资源加载器进行异步网络请求，同时进行DOM渲染，直到遇到 &lt;script&gt; 标签的时候，主进程才会停止渲染等待此资源加载完毕然后调用V8引擎对js解析，继而继续进行 DOM 解析。
我的理解如果加了async 属性就相当于单独开了一个进程去独立加载和执行，而 defer 是和将 &lt;script&gt; 放到 &lt;body&gt; 底部一样的效果。
</code></pre></li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p>12.了解<strong>防抖</strong>和<strong>节流</strong>吗？</p>
<blockquote>
<p>在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。 通常这种情况下防抖和节流是比较好的解决方案。</p>
<ul>
<li>防抖（debounce）: 所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**
* @desc 函数防抖
* @param func 函数
* @param wait 延迟执行毫秒数
* @param immediate true 表立即执行，false 表非立即执行
*/</span>
<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timeout<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> callNow <span class="token operator">=</span> <span class="token operator">!</span>timeout<span class="token punctuation">;</span>
      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>callNow<span class="token punctuation">)</span> func<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        func<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</li>
<li>节流（throttle）: 所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。节流会稀释函数的执行频率。<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**
* @desc 函数节流
* @param func 函数
* @param wait 延迟执行毫秒数
* @param type 1 表时间戳版，2 表定时器版
*/</span>
<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> wait <span class="token punctuation">,</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token operator">===</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> timeout<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous <span class="token operator">></span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          func<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
          previous <span class="token operator">=</span> now<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
          timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
          func<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
参考文章：<a href="https://www.jianshu.com/p/c8b86b09daf0" target="_blank" rel="noopener">函数防抖和节流</a></li>
</ul>
</blockquote>
</li>
</ul>
<ul>
<li><p>13.Dom 的<strong>重绘</strong>和<strong>回流</strong>呢？</p>
<blockquote>
<ul>
<li><strong>重绘（repaint）</strong>: （盒子模型的宽高、位置、样式确定后）浏览器把元素绘制出来称为重绘。当前元素的样式(背景颜色、字体颜色等)发生改变的时候，我们只需要把改变的元素重新的渲染一下即可 ,重绘对浏览器的性能影响较小，所以一般不考虑。</li>
<li><strong>回流（reflow）</strong>: 当页面上的结构发生改变，浏览器会从新的渲染我们的页面，回流是比较消耗性能的。<ul>
<li>回流产生的情况 <ul>
<li>1、添加或者删除可见的DOM元素； </li>
<li>2、元素位置改变； </li>
<li>3、元素尺寸改变——边距、填充、边框、宽度和高度 </li>
<li>4、内容改变——比如文本改变或者图片大小改变而引起的计算值宽度和高度改变； </li>
<li>5、页面渲染初始化； </li>
<li>6、浏览器窗口尺寸改变——resize事件发生时；<br>由于回流 对浏览器的影响比较大，所以我们一般是用文档碎片的方式去解决这个问题的，当我们需要给DOM中添加新的元素的时候，先将其放在一个容器中，然后统一添加，这样就只产生了一次回流。</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<pre class=" language-js"><code class="language-js">  <span class="token keyword">var</span> frg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 创建了一个文档碎片:相当于一个容器，</span>
    <span class="token comment" spellcheck="true">// 把动态创建的li先放到容器中,最后一起添加到页面中(只引发一次回流)</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">var</span> oLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     oLi<span class="token punctuation">.</span>onmouseover <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"#22b909"</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     oLi<span class="token punctuation">.</span>onmouseout <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     frg<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oLi<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   oUl<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>frg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li><p>14.<code>Promise.all()</code> 和 <code>Promise.race()</code> 的优缺点有哪些？</p>
<blockquote>
<ul>
<li><p>Promise.all()</p>
<ul>
<li>常见使用场景 ： 多个异步结果合并到一起, Promise.all可以将多个Promise实例包装成一个新的Promise实例。用于将多个Promise实例，包装成一个新的Promise实例。</li>
<li>它接受一个可迭代对象，如 Array 或 String。</li>
<li>如果传入的参数是一个空的可迭代对象，则返回一个已完成（already resolved）状态的 Promise。</li>
<li>如果传入的参数不包含任何 promise，则返回一个异步完成（asynchronously resolved） Promise。注意：Google Chrome 58 在这种情况下返回一个已完成（already resolved）状态的 Promise。</li>
<li>其它情况下返回一个处理中（pending）的Promise。这个返回的 promise 之后会在所有的 promise 都完成或有一个 promise 失败时异步地变为完成或失败。</li>
<li>返回值将会按照参数内的 promise 顺序排列，而不是由调用 promise 的完成顺序决定。</li>
<li>此方法在集合多个 promise 的返回结果时很有用。</li>
<li>传入的数组可以是Promise对象，也可以是其它值，只有Promise会等待状态改变。</li>
<li>当所有的子Promise都完成，该Promise完成，返回值是全部值的数组。</li>
<li>如果有任何一个失败，该Promise失败，返回值是第一个失败的子Promise的结果。</li>
<li>在任何情况下，Promise.all 返回的 promise 的完成状态的结果都是一个数组，它包含所有的传入迭代参数对象的值（也包括非 promise 值）。</li>
<li>如果传入的 promise 中有一个失败（rejected），Promise.all 异步地将失败的那个结果给失败状态的回调函数，而不管其它 promise 是否完成。</li>
</ul>
</li>
<li><p><code>Promise.race()</code></p>
<ul>
<li>常见使用场景：把异步操作和定时器放到一起，如果定时器先触发，认为超时，告知用户</li>
<li>它接受一个可迭代对象，类似Array。</li>
<li>返回一个待定的 Promise 只要给定的迭代中的一个promise解决或拒绝，就采用第一个promise的值作为它的值，从而异步地解析或拒绝（一旦堆栈为空）。</li>
<li>race 函数返回一个 Promise，它将与第一个传递的 promise 相同的完成方式被完成。它可以是完成（ resolves），也可以是失败（rejects），这要取决于第一个完成的方式是两个中的哪个。</li>
<li>如果传的迭代是空的，则返回的 promise 将永远等待。</li>
<li>如果迭代包含一个或多个非承诺值和/或已解决/拒绝的承诺，则 Promise.race 将解析为迭代中找到的第一个值。</li>
<li>类似于Promise.all(), 区别在于<strong>它有任意一个返回成功后，就算完成，但是进程不会立即停止</strong></li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p>15.<code>async/await</code> 与 <code>Promise</code> 的优缺点有哪些？</p>
<blockquote>
<p>async/await 是写异步代码的一种方式，以前的方法有回调函数和Promise。<br>async/await 是基于 Promise 实现的，它不能用于普通的回调函数。<br>async/await 与 Promise 一样，是非阻塞的。<br>async/await 使得异步代码看起来像同步代码。<br>await 关键字只能用在 async 定义的函数内。<br>async 函数会隐式地返回一个 Promise，该 Promise 的 resolve 值就是函数 return的值。</p>
<ul>
<li>async/await 相对于 Promise 的优点<ul>
<li>1.简洁: 不需要写.then，不需要写匿名函数处理Promise的resolve值，也不需要定义多余的data变量，还避免了嵌套代码。</li>
<li>2.错误处理: Promise中， try/catch 不能处理 Promise 中的错误，需要使用 .catch，使用 aync/await 的话，try/catch能处理Promise 中的错误:</li>
<li>3.可读性：async/await 编写可以大大地提高可读性。</li>
<li>4.错误栈: Promise 链中返回的错误栈不会准确的给出错误发生位置的线索, async/await 中的错误栈会指向错误所在的函数。</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p>16.Vue 的子组件中可以修改 props 的值吗？如果修改了会报错吗？</p>
<blockquote>
<p>先上张图，看看 Vue.js 作者的看法</p>
</blockquote>
<div style="width:100%;display:flex;flex-direction:column;justify-content:center;text-align:center;"><br><br>  <img src="https://pub.wangxuefeng.com.cn/asset/blogthumbnail/baiduInterview/modifyProps.png" style="width:100%;max-width:600px;margin: 5px auto;"><br><br></div>

<blockquote>
<p>显然，作者都不希望在子组件中去修改父组件中的数据。</p>
<p>Vue.js 官网的描述如下：</p>
<p>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。<br>这里有两种常见的试图改变一个 prop 的情形：</p>
<p>这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。在这种情况下，最好定义一个本地的 data 属性并将这个 prop 用作其初始值：</p>
<pre class=" language-js"><code class="language-js">  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'initialCounter'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      counter<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>initialCounter
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre>
<p>这个 prop 以一种原始的值传入且需要进行转换。在这种情况下，最好使用这个 prop 的值来定义一个计算属性：</p>
<pre class=" language-js"><code class="language-js">  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    normalizedSize<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre>
<p>注意在 JavaScript 中对象和数组是通过引用传入的，所以对于一个数组或对象类型的 prop 来说，在子组件中改变这个对象或数组本身将会影响到父组件的状态。<br>额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。<br>至于是否报错</p>
<ul>
<li>如果在子组件只是修改 prop 的<code>值</code>的话<ul>
<li>只有 prop 为非引用类型数据，譬如字符串，数字等，才会报错。</li>
<li>而对于引用类型的数据，如对象，数组等，不会报错。个人认为其原因可能是只是修改了其内部的值，其指针的指向性并没有发生改变。</li>
</ul>
</li>
<li>如果在子组件修改 prop 数组、对象的指针指向<ul>
<li>会报错</li>
</ul>
</li>
</ul>
<p><code style="color:red;"><br>  [Vue warn]: Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop’s value.<br></code></p>
</blockquote>
</li>
<li><p>17.手写一下深拷贝的代码吧。</p>
<blockquote>
<p>MDN 上的<code>取巧</code>写法</p>
<pre class=" language-js"><code class="language-js">  <span class="token keyword">const</span> deepClone <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>这种写法如果出现循环引用的话，<code>JSON.stringify(obj)</code> 会抛出异常，而且不能够识别Function，因此这种写法适用于一些比较简单无循环引用、无Function的对象深拷贝</p>
<p>经过琢磨，自己写了一个深拷贝的类，感觉要解决循环引用问题，只用一个方法还是有点困难的，所以通过类里的多个方法和属性协同解决。代码如下：</p>
</blockquote>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 原创代码，只此一家，如有雷同，纯属巧合</span>

  <span class="token keyword">class</span> <span class="token class-name">DeepClone</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>src <span class="token operator">=</span> obj <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// 要拷贝的对象</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>hasClonedObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// 缓存 已经拷贝过的 object</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_Circular_reference_tag <span class="token operator">=</span> <span class="token string">'$ref'</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// 循环引用占位符</span>
    <span class="token punctuation">}</span>
    <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 清空已经拷贝过的 object</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>hasClonedObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">finishedCloneObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 暂存已经拷贝过的 object， 用于判断是否循环引用</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hasClonedObj<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> e <span class="token operator">!==</span> obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hasClonedObj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">hasObjClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 判断 obj 是否已经拷贝过，即判断是否有循环引用</span>
      <span class="token keyword">let</span> rs <span class="token operator">=</span> <span class="token punctuation">{</span> hasClone<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>hasClonedObj<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          rs <span class="token operator">=</span> <span class="token punctuation">{</span> hasClone<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> i <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> rs<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">deepClone</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// 清空缓存    </span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deepCloneCore</span><span class="token punctuation">(</span>src <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// 深度拷贝</span>
    <span class="token punctuation">}</span>
    <span class="token function">cloneAndParseCR</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// 清空缓存    </span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parseCircularReference</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deepCloneCore</span><span class="token punctuation">(</span>src <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// “深”度拷贝 还原循环引用</span>
    <span class="token punctuation">}</span>
    <span class="token function">parseCircularReference</span><span class="token punctuation">(</span>rsObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 解析循环引用，还原占位符</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> rsObj <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>rsObj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          rsObj<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parseCircularReference</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token comment" spellcheck="true">// 递归深解析循环引用</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>rsObj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">// 如果时 null，直接返回 null</span>
          Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>rsObj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>rsObj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              rsObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parseCircularReference</span><span class="token punctuation">(</span>rsObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> rsObj <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rsObj<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_Circular_reference_tag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">let</span> crObj <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hasClonedObj<span class="token punctuation">[</span><span class="token function">Number</span><span class="token punctuation">(</span>rsObj<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[0-9]+/</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          rsObj <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>crObj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>crObj<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token operator">...</span>crObj<span class="token punctuation">}</span><span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">// 还原占位符， 此处为深度为一的"深"拷贝，本质为浅拷贝</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> rsObj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">deepCloneCore</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> target<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> src <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> <span class="token punctuation">{</span> hasClone<span class="token punctuation">,</span> index <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasObjClone</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasClone<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">// 如果循环引用</span>
          <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>_Circular_reference_tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>
          <span class="token comment" spellcheck="true">// 返回占位符与下标组成的字符串</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">finishedCloneObj</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">// 缓存已经拷贝过的对象</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          target <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          src<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> target<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deepCloneCore</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token comment" spellcheck="true">// 递归深度拷贝数组</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>src <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">// 如果时 null，直接返回 null</span>
          target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
          Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deepCloneCore</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token comment" spellcheck="true">// 循环递归深度拷贝对象</span>
        <span class="token punctuation">}</span> 
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        
        target <span class="token operator">=</span> src
        <span class="token comment" spellcheck="true">// 非 object 类型直接赋值拷贝</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> target
      <span class="token comment" spellcheck="true">// 返回拷贝结果</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>其实 17题 是由 16题 而来的，面试官提问的顺序极其有逻辑，如果你还不太清楚 16题 和 17题 有啥关系，那么可以<code>康康</code>这篇文章<a href="https://www.cnblogs.com/hutuzhu/p/10119698.html" target="_blank" rel="noopener">在vue中子组件修改props引发的对js深拷贝和浅拷贝的思考</a>;</p>
</blockquote>
</li>
</ul>
<p>感谢你能看到这里！本人能力有限，本文中可能有些纰漏或者不正确之处，还请批评指正。<br><br><br>以上！</p>
]]></content>
      
        <categories>
            
            <category> 技术贴 | 面试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[岁月静好，后会有期]]></title>
      <url>/archives/graduation.html</url>
      <content type="html"><![CDATA[<p>当六月逐渐来临，</p>
<p>当20154845已经无法登录TJCU，</p>
<p>当校园卡已经无法刷开图书馆的门禁，</p>
<p>当身边的人都已经穿上学士服，</p>
<p>当京东顺丰德邦已经来到宿舍楼下，</p>
<p>当阳光网站的孩子们准备好送大四的节目，</p>
<p>当一张张毕业照片被拍出来呈现在眼前，</p>
<p>当毕业典礼与学位授予仪式隆重举办，</p>
<p>当那把承载着网站精神的钥匙传承到新的继承人手里，</p>
<p>当一句句再见前程似锦被说出来，</p>
<p>当空间和朋友圈都被毕业照片与不舍再见刷屏，</p>
<p><br></p>
<p>我慢慢的，</p>
<p>才意识到，</p>
<p>我是真的要毕业了，</p>
<p>对，是真的要毕业了，</p>
<p><br></p>
<p>要离开生活了四年的天津商业大学，</p>
<p>要离开曾经一起上课的计算机科学与技术1501班，</p>
<p>要离开一起吃饭一起上下课的31栋319，</p>
<p>要离开最最深爱的阳光网站这个大家庭，</p>
<p><br></p>
<p>四年，</p>
<p>2015年9月到2019年6月，</p>
<p>有太多太多的不舍</p>
<p>始终不愿接受自己已经要毕业的事实，</p>
<p>始终表现得像个孩子一样，</p>
<p>假装我从不曾离开，</p>
<p>假装我明天就会回来，</p>
<p>假装关于你们的一切我从未在意，</p>
<p><br></p>
<p>可</p>
<p>我终究还是要走的，</p>
<p>纵然我可以舍得，</p>
<p>纵然我舍不得，</p>
<p>我的回忆里，</p>
<p>有记忆里的时光。</p>
<p><br></p>
<p>岁月静好，</p>
<p>后会有期</p>
<p><br></p>
<iframe src="//player.bilibili.com/player.html?aid=56536321&cid=98781732&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="min-height: 500px;"> </iframe>]]></content>
      
        <categories>
            
            <category> 生活纪实 | 视频类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> graduation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[极简编译器原理]]></title>
      <url>/archives/minimal-compiler-principle.html</url>
      <content type="html"><![CDATA[<p>非常生动形象的讲述了编译器原理，对学习编译原理这门课帮助很大。视频分享自 <a href="https://www.bilibili.com/video/av51948975" target="_blank" rel="noopener">Bilibili</a></p>
<iframe src="//player.bilibili.com/player.html?aid=51948975&cid=90945039&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="min-height: 500px;"> </iframe>]]></content>
      
        <categories>
            
            <category> 知识分享 | 视频类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> KnowledgeSharing </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018自我总结]]></title>
      <url>/archives/2018self-summary.html</url>
      <content type="html"><![CDATA[<p>时光总是在不经意间溜走。</p>
<p>今天是2018年的最后一天，是时候总结这一年的来来往往了。</p>
<p>2018年初，因为我心血来潮想开发一个Windows桌面软件，又因为2017年已经开发了iYoungon移动端，所以我借此机会开发了PC版的iYoungon签到系统。该系统使用JavaFX编写界面，后端依旧使用原来的API。该PC版系统实现了当时移动端大部分功能，可以签到、签退、提出申请等。但是有一个致命的缺点，就是特别卡。因为使用了主线程去渲染界面，请求数据等。因为自己的技术能力有限，也就没有去优化改进这个问题。2019年，我打算放弃这个项目，并开始一个新的项目。</p>
<p></p><p style="text-align: center;"><br>    <img src="https://github.com/w-xuefeng/iYoungonPC/raw/master/img/loginView.png"><br></p><br>有句话怎么说，但行好事，莫问前程。随着时间的推移，上半年我也考了很多试，软考、四级等。软考还是复习了的呢，当时买了教材和套题，有认真的去做。但是结果不尽如人意。不知是为何，面对四级总是那么的坦然和无感，所以裸考是毫无疑问的，结果也是了然于心的。4次考四级，只感觉每年的真题都是一个套路，一次次的失败，不仅没有激起我好好学习英语的动力，而且让我更加对四级这种事情感到麻木无感，也许我从从未重视过这件事情，以后也不会。<p></p>
<p>2018年上学期结束后，没有回家。第一次暑假不在家。</p>
<p>依稀记得那是考完编译原理的一天，我在实习僧上面投简历。抱着试一试的态度投了百度、新浪、网易、腾讯。过了几天，网易打电话过来问我能不能到他们那里去面试。面试很顺利，从此开始了我的第一次实习经历。我正式成为了猪场一员，并成功进入网易食堂，吃上了网易的黑猪肉。尽管其中有些波折………</p>
<p>在网易实习期间，确实学习到了很多东西。不论是技术方面，还是为人方面，都有了长足的进步。最重要的是，开阔了眼界。</p>
<p>2018年11月2日，这天是我离职的日子，也是我们设计前端组团建的日子。我们leader说，是为我践行，我很开心。水足饭饱后，办完手续，我默默的走出了公司。离开了北京，这个伤心而又向往的地方。</p>
<p><img src="https://pub.wangxuefeng.com.cn/asset/blogthumbnail/2018selfSummary/netease.jpg" alt="netease"></p>
<p>回到学校后，开始着手毕设和大创。每天过着重复的生活，eating、sleeping、coding。。。</p>
<p>渐渐地，2018年所剩无几，我们唯一想做的，就是不停的回顾往事，感叹时光飞逝。</p>
<p>2018年12月30日，Youngon15级，我们相聚一起，回首青春，镌刻此书。</p>
]]></content>
      
        <categories>
            
            <category> 流水账 | 总结类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> self-summary </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读书会【Day5】]]></title>
      <url>/archives/readbook05.html</url>
      <content type="html"><![CDATA[<h1 id="Day5"><a href="#Day5" class="headerlink" title="Day5"></a>Day5</h1><blockquote>
<p>费曼技巧</p>
<p>加强学习的深度，可以从横向拓展（相同领域的知识）、纵向拓展（该领域内有关的知识，比如历史，发展问题）、跨界拓展（不同领域的知识相互关联，碰撞出新的火花）三方面进行。</p>
<p>最有效的记忆方式不是阅读，而是知识的输出，试着将所学复述给他人，首先将自己的理解写下，看自己掌握的程度，遇到卡壳的地方再去查找资料，直到一个行业小白能够轻而易举的明白你的描述…</p>
</blockquote>
<p><img src="https://pub.wangxuefeng.com.cn/asset/blogthumbnail/readbook/thumbnail5-review.jpg" alt="review"></p>
<div style="display: flex;justify-content: flex-end;align-items: center;margin-bottom: 1em;"><br>  <span>————</span><br>  <a href="https://www.jianshu.com/u/06408f56492c" target="_blank" style="display:flex;align-items: center;text-decoration:none;color: #000;"><br>      <img src="https://pub.wangxuefeng.com.cn/asset/defaultHead/sjwxhead.jpg" width="40" height="40" style="margin:0 5px;border-radius: 50%;border:1px solid #1B2B34"><br>      <span style="text-align: right;">SU尔不认输</span><br>  </a><br></div>



<blockquote>
<p> 调和你的目标和欲望，以明确你在生活中真正想要的东西。</p>
</blockquote>
<p style="text-align: right">————瑞·达利欧 《原则》</p>

]]></content>
      
        <categories>
            
            <category> SU尔不认输 | 读书会 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> reading </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【从点子到产品】MVP-读书会【Day4】]]></title>
      <url>/archives/readbook04-suer-fromI2P-MVP.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>MVP，王者荣耀的MVP吗？NO，NO，NO。</p>
<p>Minimum Viable Product，最小可用化产品，这个概念是埃里克.莱斯所著的《精益创业》中提到的概念，它的目的是验证两件事：一是产品满足了用户需求；二是产品能够创造的商业价值。</p>
</blockquote>
<p>我最初见到这个概念，是参加训练营时助教大大提到的，用来督促我们写作业，当时很多同学面临的一个巨大问题是，作业无法按时完成，其原因之一是欲将作业做到极致，做到完美，而这时候提出的MVP概念则是强调先完成，再迭代。那么运用在产品中，则意味着要在低成本下将产品的核心价值体现出来。</p>
<p>作为一个产品新人，刚开始接触产品或做某个产品模块时，会认为好的产品应该是面面俱到，想做到淘宝、微信、QQ这样的多元化产品是不可能的。用MVP法则来说，产品早期更应该关注核心功能，实现产品的核心价值，原因如下：</p>
<ul>
<li><p>一：产品模型的合理不能确保功能也受用户喜欢，快速投入市场中验证是最妥当的办法。这也不失为是一种低成本的试错机会。</p>
</li>
<li><p>二：产品的核心功能是解决用户问题，那么就未必等到产品复杂、完善后再去吸引用户。简单的来说，只要这个功能满足用户-需求-场景，被用户所接受，即可快速提供给用户。</p>
</li>
</ul>
<h3 id="如何设计MVP"><a href="#如何设计MVP" class="headerlink" title="如何设计MVP"></a>如何设计MVP</h3><ul>
<li><p>一、奥卡姆剃刀法</p>
<p>“如无必要，勿增实体”，做产品也要遵循这个原则，把预期方案罗列出来，根据减法原则做功能需求的排序，一点点的砍掉不重要的功能，筛选出最核心的功能。</p>
</li>
<li><p>二、用户访谈法</p>
<p>根据不同的方案，做几个demo，召集用户来体验评价，筛选用户可接受的最低限度的方案。</p>
</li>
<li><p>三、去掉人工可处理的功能</p>
<p>将人工处理的功能丢掉，改为人力代替，降低开发成本。例如早期外卖平台的做法，很多都是工作人员看到订单，亲自给饭店打电话，那么人工处理的这个功能完全可以用人力来代替，也降低了开发成本。</p>
</li>
<li><p>四、确保只有一个功能</p>
<p>在MVP中，只是先最最重要的功能，其他功能后置。让用户知道你是做什么的，也对产品有一个较好的定位。</p>
</li>
</ul>
<h3 id="MVP方法"><a href="#MVP方法" class="headerlink" title="MVP方法"></a>MVP方法</h3><p>设计好MVP，如何运用呢？</p>
<p>将MVP产品，投放到市场中让用户体验，收集用户反馈，持续优化。</p>
<ul>
<li><p>一、广告</p>
<p>发布一则广告，看有多少用户对这个产品感兴趣，再去决定是否做产品。</p>
</li>
<li><p>二、假MVP</p>
<p>做一个视觉效果ok的产品，但功能都是假的，通过查看用户对功能的点击了解用户对功能的需求，必要时可提醒用户留下邮箱，方便做前期调研和以及为产品积累一批种子用户。</p>
</li>
<li><p>三、众筹</p>
<p>将产品的预设功能进行预售，看有多少用户愿意为之付钱，这也是检验功能和商业价值的方法。</p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><p>1、大部分产品都在等待功能完善、交互完美、界面出色，以为能一炮而红，结果都没能等到那一天</p>
</li>
<li><p>2、产品初期要做很多减法</p>
</li>
<li><p>3、MVP法则在任何地方都是值得借鉴的，先做基本，再去追求完美。</p>
</li>
</ul>
<div style="display: flex;flex-direction: column;align-items: flex-end;"><br>    <div style="display: flex;justify-content: flex-end;align-items: center;margin-bottom: 1em;"><br>      <span>————</span><br>      <a href="https://www.jianshu.com/u/06408f56492c" target="_blank" style="display:flex;align-items: center;text-decoration:none;color: #000;"><br>          <img src="https://pub.wangxuefeng.com.cn/asset/defaultHead/sjwxhead.jpg" width="40" height="40" style="margin:0 5px;border-radius: 50%;border:1px solid #1B2B34"><br>          <span style="text-align: right;">SU尔不认输</span><br>      </a><br>    </div><br>    <span>本文收录自 <a href="https://www.jianshu.com/u/06408f56492c" target="_blank">SU尔不认输</a> 的简书</span><br>    <a href="https://www.jianshu.com/p/70e1c6548899" target="_blank">原文链接：https://www.jianshu.com/p/70e1c6548899</a><br></div>
]]></content>
      
        <categories>
            
            <category> SU尔不认输 | 产品篇 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MVP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读书会【Day3】]]></title>
      <url>/archives/readbook03.html</url>
      <content type="html"><![CDATA[<h1 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h1><blockquote>
<p> 1.在记忆知识的时候，总是面临看完忘，用时忘的问题，信息是具有一定结构，关键和分类的，要学会构建知识地图…</p>
<p> 2.如何构建知识体系？解码 ＋ 体系化</p>
<p> 解码：首先理解事物的表面，再去逐渐询问自己事物的本质，是什么？为什么这样？怎么造成的？</p>
<p> 体系化：分为自下而上和自上而下的方法，自下而上需要自己去总结，提炼，分类；自上而下则是在已有栏目中添加符合的信息。</p>
<p> 3.如何通过速读来提炼要点？</p>
<p> 拆解问题：首先要有明确的阅读目标，并且聚焦目标，这时候建议用指读法来避免复读，也可达到注意力集中的目的；</p>
<p> 浏览全局概念，再根据自我目的进行细读，时刻询问自己为什么阅读、相关内容对自己的价值是什么、希望借用知识来做什么达到怎样的目，将知识真正的消化。</p>
</blockquote>
<div style="display: flex;justify-content: flex-end;align-items: center;margin-bottom: 1em;"><br>  <span>————</span><br>  <a href="https://www.jianshu.com/u/06408f56492c" target="_blank" style="display:flex;align-items: center;text-decoration:none;color: #000;"><br>      <img src="https://pub.wangxuefeng.com.cn/asset/defaultHead/sjwxhead.jpg" width="40" height="40" style="margin:0 5px;border-radius: 50%;border:1px solid #1B2B34"><br>      <span style="text-align: right;">SU尔不认输</span><br>  </a><br></div>



<blockquote>
<p> 不要为自身形象担心，只需关心能不能实现你的目标。</p>
</blockquote>
<p style="text-align: right">————瑞·达利欧 《原则》</p>

]]></content>
      
        <categories>
            
            <category> SU尔不认输 | 读书会 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> reading </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[逆向思维-读书会【Day2】]]></title>
      <url>/archives/readbook02.html</url>
      <content type="html"><![CDATA[<h1 id="Day2-逆向思维"><a href="#Day2-逆向思维" class="headerlink" title="Day2 逆向思维"></a>Day2 逆向思维</h1><blockquote>
<p> 以结果为导向，明确自己目标，看清与目标的差距，找到解决的方法，并付诸行动～</p>
<p> 以过程为导向，看不到结果，每天都做着随机的布朗运动，走到哪算哪，然而我不是一味追求享受的人儿…</p>
<p> 放大眼界，从长远目标出发，落实到每一步行动计划！</p>
</blockquote>
<div style="display: flex;justify-content: flex-end;align-items: center;margin-bottom: 1em;"><br>  <span>————</span><br>  <a href="https://www.jianshu.com/u/06408f56492c" target="_blank" style="display:flex;align-items: center;text-decoration:none;color: #000;"><br>      <img src="https://pub.wangxuefeng.com.cn/asset/defaultHead/sjwxhead.jpg" width="40" height="40" style="margin:0 5px;border-radius: 50%;border:1px solid #1B2B34"><br>      <span style="text-align: right;">SU尔不认输</span><br>  </a><br></div>



<blockquote>
<p> 直面你的问题、错误和弱点导致的痛苦现实，会大幅提高你的效率。</p>
</blockquote>
<p style="text-align: right">————瑞·达利欧 《原则》</p>

]]></content>
      
        <categories>
            
            <category> SU尔不认输 | 读书会 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> reading </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读书会【Day1】]]></title>
      <url>/archives/readbook01.html</url>
      <content type="html"><![CDATA[<h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><blockquote>
<p>成年人学习的四大特点：自愿，自主，经验，行动</p>
<p>而在学习过程中很多半途而废，或因目标不明确，或因时间不允许，也或因没有参与感～</p>
<p>像每天固定时间刷牙，这是起床后的触发动作，学习也应培养固定的触发时间，触发动作。</p>
</blockquote>
<div style="display: flex;justify-content: flex-end;align-items: center;margin-bottom: 1em;"><br>  <span>————</span><br>  <a href="https://www.jianshu.com/u/06408f56492c" target="_blank" style="display:flex;align-items: center;text-decoration:none;color: #000;"><br>      <img src="https://pub.wangxuefeng.com.cn/asset/defaultHead/sjwxhead.jpg" width="40" height="40" style="margin:0 5px;border-radius: 50%;border:1px solid #1B2B34"><br>      <span style="text-align: right;">SU尔不认输</span><br>  </a><br></div>



<blockquote>
<p>有望得到的要努力，无望得到的不介意，则无论输赢姿态都会好看。</p>
</blockquote>
<p style="text-align: right">————瑞·达利欧 《原则》</p>

]]></content>
      
        <categories>
            
            <category> SU尔不认输 | 读书会 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> reading </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[斜分色块]]></title>
      <url>/archives/Oblique-color-block.html</url>
      <content type="html"><![CDATA[<h3 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h3><ul>
<li>将两个色块使用斜线分隔开</li>
</ul>
<h3 id="HTML-结构"><a href="#HTML-结构" class="headerlink" title="HTML 结构"></a>HTML 结构</h3><pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="CSS-实现"><a href="#CSS-实现" class="headerlink" title="CSS 实现"></a>CSS 实现</h3><pre class=" language-css"><code class="language-css">  <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*左边色块的颜色*/</span>
  <span class="token punctuation">}</span>
  <span class="token selector"><span class="token class">.box</span><span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>     
    <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*右边色块顶部距离右边的距离*/</span>
    <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid transparent<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*右边色块底部距离右边的距离 - 右边色块顶部距离右边的距离*/</span>
    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">50</span>px solid deepskyblue<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*右边色块的高度及颜色*/</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>      
  <span class="token punctuation">}</span>
</code></pre>
<h3 id="效果预览："><a href="#效果预览：" class="headerlink" title="效果预览："></a>效果预览：</h3><p><img src="https://pub.wangxuefeng.com.cn/asset/blogthumbnail/Oblique-color-block/cssView.png" alt="cssview"></p>
<h3 id="Javascript-封装实现"><a href="#Javascript-封装实现" class="headerlink" title="Javascript 封装实现"></a>Javascript 封装实现</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">let</span> Segment <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>opt<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  Segment<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    init <span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">"relative"</span><span class="token punctuation">;</span>    
      <span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>opt<span class="token punctuation">.</span>width<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px`</span></span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>opt<span class="token punctuation">.</span>height<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px`</span></span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> opt<span class="token punctuation">.</span>leftColor<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawRight</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    drawRight <span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      document<span class="token punctuation">.</span>styleSheets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">removeRule</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>opt<span class="token punctuation">.</span>el<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">::after`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> deg <span class="token operator">=</span> opt<span class="token punctuation">.</span>deg <span class="token operator">></span> <span class="token number">90</span> <span class="token operator">?</span> <span class="token number">180</span> <span class="token operator">-</span> opt<span class="token punctuation">.</span>deg <span class="token punctuation">:</span> opt<span class="token punctuation">.</span>deg<span class="token punctuation">;</span>
      <span class="token keyword">let</span> k <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">tan</span><span class="token punctuation">(</span>deg <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token operator">/</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
      <span class="token keyword">let</span> minK <span class="token operator">=</span> opt<span class="token punctuation">.</span>height <span class="token operator">/</span> opt<span class="token punctuation">.</span>width<span class="token punctuation">;</span>
      k <span class="token operator">=</span> k <span class="token operator">&lt;</span> minK <span class="token operator">?</span> minK <span class="token punctuation">:</span> k<span class="token punctuation">;</span>    
      opt<span class="token punctuation">.</span>rightTopWidth <span class="token operator">=</span> deg <span class="token operator">!=</span> <span class="token number">90</span> <span class="token operator">?</span> opt<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> opt<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">)</span> <span class="token punctuation">:</span> opt<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> cssRule <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token template-string"><span class="token string">`position: absolute`</span></span><span class="token punctuation">,</span>
        <span class="token template-string"><span class="token string">`right: 0`</span></span><span class="token punctuation">,</span>
        <span class="token template-string"><span class="token string">`bottom: 0`</span></span><span class="token punctuation">,</span>
        <span class="token template-string"><span class="token string">`width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>opt<span class="token punctuation">.</span>rightTopWidth<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px`</span></span><span class="token punctuation">,</span>
        <span class="token template-string"><span class="token string">`border-left: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>opt<span class="token punctuation">.</span>width <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> opt<span class="token punctuation">.</span>rightTopWidth<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px solid transparent`</span></span><span class="token punctuation">,</span>
        <span class="token template-string"><span class="token string">`border-bottom: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>opt<span class="token punctuation">.</span>height<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px solid </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>opt<span class="token punctuation">.</span>rightColor<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>
        <span class="token template-string"><span class="token string">`content: ""`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">;</span>
      opt<span class="token punctuation">.</span>deg <span class="token operator">></span> <span class="token number">90</span> <span class="token operator">?</span> cssRule<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`transform: rotateX(180deg);`</span></span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      document<span class="token punctuation">.</span>styleSheets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insertRule</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>opt<span class="token punctuation">.</span>el<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">::after{</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cssRule<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}`</span></span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">new</span> <span class="token class-name">Segment</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span> <span class="token string">'.box'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 实例的class或id</span>
    width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 实例的宽度</span>
    height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 实例的高都</span>
    leftColor<span class="token punctuation">:</span> <span class="token string">'pink'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 左边颜色</span>
    rightColor<span class="token punctuation">:</span> <span class="token string">'deepskyblue'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 右边颜色</span>
    deg<span class="token punctuation">:</span> <span class="token number">135</span> <span class="token comment" spellcheck="true">// 分割斜线第一象限角的角度</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="效果预览：-1"><a href="#效果预览：-1" class="headerlink" title="效果预览："></a>效果预览：</h3><p><img src="https://pub.wangxuefeng.com.cn/asset/blogthumbnail/Oblique-color-block/jsView.png" alt="jsview"></p>
<p><a href="https://github.com/w-xuefeng/O-ColorBlock" target="_blank" rel="noopener">Github</a></p>
<p><a href="https://w-xuefeng.github.io/O-ColorBlock/" target="_blank" rel="noopener">预览</a></p>
]]></content>
      
        <categories>
            
            <category> 技术贴 | 面试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[试做同学的阿里前端一面试题]]></title>
      <url>/archives/classmate-Alibaba-interview.html</url>
      <content type="html"><![CDATA[<h3 id="【题目1】"><a href="#【题目1】" class="headerlink" title="【题目1】"></a>【题目1】</h3><pre class=" language-js"><code class="language-js">  <span class="token comment" spellcheck="true">//请编写一段js函数，该函数的参数是一个骆驼命名法命名的变量标识符，  </span>
  <span class="token comment" spellcheck="true">//函数最终返回该标识符的下划线命名法，如，输入：abcDefGh，返回：abc_def_gh</span>
</code></pre>
<blockquote>
<p>第一种写法</p>
</blockquote>
<pre class=" language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">changeName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token regex">/[A-Z]/</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token string">'_'</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>第二种写法</p>
</blockquote>
<pre class=" language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">changeName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token regex">/[A-Z]/</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre>
<h3 id="【题目2】"><a href="#【题目2】" class="headerlink" title="【题目2】"></a>【题目2】</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**
 * 说明：获取一个数字数组中的最大值
 * 示例：
 * 输入：[1, 5, 3, 9, 2, 7]
 * 输出：9
 */</span>
</code></pre>
<blockquote>
<p>第一种写法</p>
</blockquote>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getMaxValue</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>第二种写法 //ES5</p>
</blockquote>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getMaxValue</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>第三种写法 //ES6</p>
</blockquote>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getMaxValue</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="【题目3】"><a href="#【题目3】" class="headerlink" title="【题目3】"></a>【题目3】</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**
 * 多维数组打平成一维数组
 * 说明
 *  1. 数组维度表示数组嵌套数组的深度，如二维数组`[1, [2]]`
 *  2. 数组维度不限，理论上可以无限
 *  3. 数组项可以是number、string、boolean、object、null等JSON合法数据类型
 * 示例：
 *  const a = ['1', 2, false, ['a[b]c', 'd,e,f', [3], [[4]]], [{g: 5}]];
 *  flatten(a); // 返回 ['1', 2, false, 'a[b]c', 'd,e,f', 3, 4, {g: 5}]
 */</span>
</code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>pre<span class="token punctuation">,</span>cur<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>pre<span class="token punctuation">,</span><span class="token operator">...</span><span class="token function">flatten</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="【题目4】"><a href="#【题目4】" class="headerlink" title="【题目4】"></a>【题目4】</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**
 * 说明：简单实现一个事件订阅机制，具有监听on\one和触发emit方法
 * 示例：
 * const event = new EventEmitter();
 * event.on('someEvent', (...args) => { 
 *     console.log('some_event triggered', ...args);
 * }); 
  * event.one('someEvent', (...args) => { 
 *     console.log('some_event triggered', ...args);
 * }); 
 * event.emit('someEvent', 'abc', '123'); 
 */</span>
</code></pre>
<pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">/**
 * 事件中心
 */</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span>
  event<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">any</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> func<span class="token punctuation">:</span> <span class="token keyword">Function</span><span class="token punctuation">,</span> one<span class="token punctuation">:</span> Boolean <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 事件池</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>event <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">/**
   * 监听事件
   * @param {String} eventName 事件名称
   * @param {Function} func 事件函数
   * @param {Boolean} one 是否只监听一次
   */</span>
  <span class="token function">on</span><span class="token punctuation">(</span>eventName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> func<span class="token punctuation">:</span> <span class="token keyword">Function</span><span class="token punctuation">,</span> one<span class="token operator">?</span><span class="token punctuation">:</span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>event<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>event<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> func<span class="token punctuation">,</span> one <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>event<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> func<span class="token punctuation">,</span> one <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">/**
   * 监听一次事件
   * @param {String} eventName 事件名称
   * @param {Function} func 事件函数
   */</span>
  <span class="token function">one</span><span class="token punctuation">(</span>eventName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> func<span class="token punctuation">:</span> <span class="token keyword">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> func<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">/**
   * 解绑事件
   * @param {String} eventName 事件名称
   */</span>
  <span class="token function">off</span><span class="token punctuation">(</span>eventName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>event<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">/**
   * 发送事件
   * @param {String} eventName 事件名称
   * @param {any[]} args 传递的参数
   */</span>
  <span class="token function">emit</span><span class="token punctuation">(</span>eventName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>event<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>event<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      item<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>one<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="【题目5】"><a href="#【题目5】" class="headerlink" title="【题目5】"></a>【题目5】</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**
&lt;!DOCTYPE html>
&lt;html>

  &lt;head>
      &lt;meta charset="UTF-8">
      &lt;title>Document&lt;/title>
  &lt;/head>

  &lt;body>
      &lt;div id="page">
          &lt;div class="content main">
              &lt;div class="refer">
                  &lt;ul>
                      &lt;li>&lt;/li>
                      &lt;li>&lt;/li>
                      ...
                  &lt;/ul>
              &lt;/div>
          &lt;/div>
      &lt;/div>
      &lt;script>
          var genCssSelector = function () {

          }

          document.addEventListener('click', function (e) {

              //点击li时，返回：html body #page .content.main .refer ul li
              console.log(genCssSelector(e.target));

          })
      &lt;/script>
  &lt;/body>

&lt;/html>
 */</span>
</code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> genCssSelector <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>dom<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>dom<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dom<span class="token punctuation">.</span>id <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'#'</span> <span class="token operator">+</span> dom<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dom<span class="token punctuation">.</span>className <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">let</span> classname <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> dom<span class="token punctuation">.</span>classList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                classname <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'.'</span> <span class="token operator">+</span> dom<span class="token punctuation">.</span>classList<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>classname<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dom<span class="token punctuation">.</span>localName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>        
        dom <span class="token operator">=</span> dom<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> 技术贴 | 面试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构之单链表]]></title>
      <url>/archives/linear-table-of-data-structures.html</url>
      <content type="html"><![CDATA[<h3 id="单链表节点类型定义"><a href="#单链表节点类型定义" class="headerlink" title="单链表节点类型定义"></a>单链表节点类型定义</h3><pre class=" language-c"><code class="language-c">    <span class="token keyword">typedef</span> <span class="token keyword">int</span> DataType<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义数据类型，此处以整型为例</span>
    <span class="token keyword">typedef</span> <span class="token keyword">struct</span> node<span class="token punctuation">{</span>
        DataType data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//节点的数据域</span>
        <span class="token keyword">struct</span> node <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//节点的指针域</span>
    <span class="token punctuation">}</span>NODE<span class="token punctuation">,</span><span class="token operator">*</span>LinkList<span class="token punctuation">;</span>
</code></pre>
<h3 id="单链表的运算函数"><a href="#单链表的运算函数" class="headerlink" title="单链表的运算函数"></a>单链表的运算函数</h3><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><pre class=" language-c"><code class="language-c">
    <span class="token comment" spellcheck="true">/**
    *
    * @function 在表中查找第k个元素，若找到，返回该元素节点的指针；否则返回空指针NULL
    * @parameter L 带头节点单链表的头指针
    * @parameter k 要查找元素的位置
    * @return 查找到元素节点的指针或者空指针NULL
    *
    */</span>

    LinkList <span class="token function">Find_List</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
        LinkList p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//令p指向第一个元素</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化计数器</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> k <span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//依次向后查找，直到p指向第k个元素节点或者p为空指针</span>
            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> i<span class="token operator">==</span>k<span class="token punctuation">)</span> <span class="token operator">?</span> p <span class="token punctuation">:</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><pre class=" language-c"><code class="language-c">
    <span class="token comment" spellcheck="true">/**
    *
    * @function 将元素newElem插入表中的第k个元素之前即第k-1个元素之后,成功返回0，失败返回-1
    * @parameter L 带头节点单链表的头指针
    * @parameter k 要插入元素的位置
    * @parameter newElem 要插入的新元素
    * @return 0或-1
    *
    */</span>

    <span class="token keyword">int</span> <span class="token function">Insert_List</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> DataType newElem<span class="token punctuation">)</span><span class="token punctuation">{</span>
        LinkList p<span class="token punctuation">,</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//临时指针</span>
        p <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?</span> L <span class="token punctuation">:</span> <span class="token function">Find_List</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//表中不从在第k-1个元素</span>
        s <span class="token operator">=</span> <span class="token punctuation">(</span>NODE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NODE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//为新元素申请节点空间</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//空间申请失败</span>
        s<span class="token operator">-></span>data <span class="token operator">=</span> newElem<span class="token punctuation">;</span>
        s<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>
        p<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//插入元素</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><pre class=" language-c"><code class="language-c">
    <span class="token comment" spellcheck="true">/**
    *
    * @function 删除表中的第k个元素节点，即将第k-1个元素的指针域指向第k+1个元素所在节点，成功返回0，失败返回-1
    * @parameter L 带头节点单链表的头指针
    * @parameter k 要删除元素的位置
    * @return 0或-1
    *
    */</span>

    <span class="token keyword">int</span> <span class="token function">Delete_List</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>
        LinkList p<span class="token punctuation">,</span> q<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//临时指针</span>
        p <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?</span> L <span class="token punctuation">:</span> <span class="token function">Find_List</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> k<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p <span class="token operator">||</span> <span class="token operator">!</span>p<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//表中不从在第k个元素</span>
        q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>
        p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//删除节点</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> 技术贴 | 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DataStructures </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[编译原理知识点小总结]]></title>
      <url>/archives/Summary-of-compiling-principle.html</url>
      <content type="html"><![CDATA[<h1 id="编译原理基础知识-Q-amp-A"><a href="#编译原理基础知识-Q-amp-A" class="headerlink" title="编译原理基础知识 Q &amp; A"></a>编译原理基础知识 Q &amp; A</h1><h2 id="Q1-有哪些编程语言是编译执行的，哪些是解释执行的？"><a href="#Q1-有哪些编程语言是编译执行的，哪些是解释执行的？" class="headerlink" title="Q1.有哪些编程语言是编译执行的，哪些是解释执行的？"></a>Q1.有哪些编程语言是编译执行的，哪些是解释执行的？</h2><ul>
<li>编译执行：</li>
</ul>
<blockquote>
<p><code>C</code>、<code>C++</code>、<code>Pascal/Object Pascal（Delphi）</code>等</p>
</blockquote>
<ul>
<li>解释执行：</li>
</ul>
<blockquote>
<p><code>JavaScript</code>、<code>VBScript</code>、<code>Perl</code>、<code>Python</code>、<code>Ruby</code>、<code>MATLAB</code>、<code>PHP</code>、<code>ASP</code>、<code>解释性Basic语言</code>等</p>
</blockquote>
<ul>
<li>先编译后解释:</li>
</ul>
<blockquote>
<p><code>Java</code>、<code>JSP</code>、<code>C#</code>等</p>
</blockquote>
<h2 id="Q2-编译器的概念？"><a href="#Q2-编译器的概念？" class="headerlink" title="Q2.编译器的概念？"></a>Q2.编译器的概念？</h2><blockquote>
<p>A compiler is a program that reads a program written in a source language and translates it into an equivalent program in a target language.</p>
<p>编译器是一个读取用源语言（高级语言，接近自然语言）编写的程序并将其转换成与之等价的目标语言（低级语言，汇编语言和机器语言）的程序。</p>
</blockquote>
<h2 id="Q3-编译器的合作伙伴有哪些？各完成什么功能？"><a href="#Q3-编译器的合作伙伴有哪些？各完成什么功能？" class="headerlink" title="Q3.编译器的合作伙伴有哪些？各完成什么功能？"></a>Q3.编译器的合作伙伴有哪些？各完成什么功能？</h2><ul>
<li><p>1.预处理器:在真正的编译开始之前由编译器调用的独立程序。预处理器可以删除注释、包含其他文件以及执行宏替代(宏定义)</p>
</li>
<li><p>2.汇编器：将汇编语言翻译为机器语言的程序</p>
</li>
<li><p>3.链接加载编辑器：将机器语言关联目标机并转化成可执行程序，然后将可执行程序加载到内存并进行执行</p>
</li>
</ul>
<h2 id="Q4-编译器逻辑上包含哪几个阶段？分析和综合阶段、前端和后端都各包含哪些阶段？"><a href="#Q4-编译器逻辑上包含哪几个阶段？分析和综合阶段、前端和后端都各包含哪些阶段？" class="headerlink" title="Q4.编译器逻辑上包含哪几个阶段？分析和综合阶段、前端和后端都各包含哪些阶段？"></a>Q4.编译器逻辑上包含哪几个阶段？分析和综合阶段、前端和后端都各包含哪些阶段？</h2><ul>
<li><p>分析阶段（前端）： 词法分析，语法分析，语义分析，中间代码生成</p>
</li>
<li><p>综合阶段（后端）： 代码优化，目标代码生成</p>
</li>
<li><p>辅助阶段（贯穿始终）： 符号表管理，错误处理</p>
</li>
</ul>
<p><img src="https://pub.wangxuefeng.com.cn/asset/blogthumbnail/Summaryofcompilingprinciple/ljjd.jpg" alt="逻辑阶段"></p>
<h2 id="Q5-自己遇到的词法、语法、语义错误有哪些？"><a href="#Q5-自己遇到的词法、语法、语义错误有哪些？" class="headerlink" title="Q5.自己遇到的词法、语法、语义错误有哪些？"></a>Q5.自己遇到的词法、语法、语义错误有哪些？</h2><ul>
<li><p>词法错误：</p>
<ul>
<li><p>1.赋值符”=”与比较符号”==”混淆，常在条件语句中出错，如</p>
<pre class=" language-C"><code class="language-C">      if(i = 10){
          //do something
      }else{
          //do something
      }
</code></pre>
<p>像以上这样的写法，错误不容易发现，而且在部分语言中程序还会照常执行，因此可使用以下写法</p>
<pre class=" language-C"><code class="language-C">      if(10 == i){
          //do something
      }
</code></pre>
<p>将常量写在前，变量写在后，若无意将比较符号”==”写为类赋值符”=”，程序将会报错警告</p>
</li>
<li><p>2.&amp;和|不同于&amp;&amp;和||，    &amp;和|是按位与和或，&amp;&amp;和||是逻辑运算符（与和或）</p>
</li>
<li><p>3.字符与字符串混淆</p>
<blockquote>
<p>单引号包起来的字符事实上是一个整数，整数值对应于该字符在编译器采用的字符集的序列值。如’a’与0141（八进制）97（十进制）完全一致。</p>
<p>双引号引起来的字符串代表一个指向无名数组的起始字符的指针。该数组被双引号之间的字符以及一个’\0’初始化。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>语法错误：</p>
<ul>
<li><p>1.变量标识符定义错误，如</p>
<pre class=" language-c"><code class="language-c">      <span class="token keyword">int</span> 1i<span class="token punctuation">;</span> 
      <span class="token comment" spellcheck="true">//变量标识符不能以数字开头</span>
</code></pre>
</li>
<li><p>2.保留关键字单词出错或者使用保留关键字作变量，如</p>
<pre class=" language-c"><code class="language-c">      chat a<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//应该是 char a;</span>
      <span class="token keyword">int</span> <span class="token keyword">long</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//long是保留关键字</span>
</code></pre>
</li>
<li><p>3.配对符号不匹配，如</p>
<pre class=" language-c"><code class="language-c">      <span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
      <span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>
      <span class="token keyword">float</span> c <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token punctuation">(</span> b <span class="token operator">+</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//缺少右括号</span>
</code></pre>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>语义错误：</p>
<ul>
<li><p>1.变量未定义，如</p>
<pre class=" language-c"><code class="language-c">      <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//b未定义</span>
</code></pre>
</li>
<li><p>2.函数实参形参类型不兼容,或返回值类型不兼容，如    </p>
<pre class=" language-c"><code class="language-c">      <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">return</span>  a<span class="token operator">+</span> b<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
      <span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">2.96</span><span class="token punctuation">;</span>
      <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// double类型不能自转为int类型，参数及返回值的类型都不兼容</span>
</code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="Q6-长度为n的字符串的（真）前缀、后缀、子串、子序列各有多少个？（假设字符串中不存在相同字符）"><a href="#Q6-长度为n的字符串的（真）前缀、后缀、子串、子序列各有多少个？（假设字符串中不存在相同字符）" class="headerlink" title="Q6.长度为n的字符串的（真）前缀、后缀、子串、子序列各有多少个？（假设字符串中不存在相同字符）"></a>Q6.长度为n的字符串的（真）前缀、后缀、子串、子序列各有多少个？（假设字符串中不存在相同字符）</h2><ul>
<li><p>前缀: n＋1 个</p>
<blockquote>
<p>前缀分别是ε、只含第一个字符的子串、只含前两个字符的子串、只含前3个字符的子串、……、含前n个字符的子串</p>
</blockquote>
</li>
<li><p>后缀: n＋1 个</p>
<blockquote>
<p>后缀分别是ε、只含最后一个字符的子串、只含最后两个字符的子串、只含最后3个字符的子串、……、含最后n个字符的子串</p>
</blockquote>
</li>
<li><p>子串: <img src="https://pub.wangxuefeng.com.cn/asset/blogthumbnail/Summaryofcompilingprinciple/nD2.jpg" alt="n(n+1)/2">+1个</p>
<blockquote>
<p>长度为0的子串1个，长度为1的子串n个，长度为2的子串n－1个，长度为3的子串n－2个，……，长度为n－1的子串2个，长度为n的子串1个</p>
</blockquote>
</li>
<li><p>真前缀: n-1 个</p>
<blockquote>
<p>真前缀比前缀少了一个串本身和ε</p>
</blockquote>
</li>
<li><p>真后缀: n-1 个</p>
<blockquote>
<p>真后缀也比后缀少了一个串本身和ε</p>
</blockquote>
</li>
<li><p>子序列: 2<sup>n</sup>个</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术贴 | 总结类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> summary </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017自我总结-时光飞逝,回头看看,抬头望望]]></title>
      <url>/archives/2017self-summary.html</url>
      <content type="html"><![CDATA[<h1 id="时光飞逝"><a href="#时光飞逝" class="headerlink" title="时光飞逝"></a>时光飞逝</h1><p>  时间总是在不经意间流走，转眼又一年即将过去。</p>
<p>  2017年，从大二下步入大三上，身边的人都在渐渐地长大，变得更加成熟。</p>
<p>  也许是离毕业更近一步的缘故吧，身边的人们都已找到自己的方向，并朝此努力。</p>
<p>  刚刚步入大三时，我一直在迷茫，自己要在这一年做什么，以后又要何去何从。</p>
<p>  就这样，迷茫着，彷徨着，前进着，2017年缓缓流逝着…</p>
<h1 id="回头看看"><a href="#回头看看" class="headerlink" title="回头看看"></a>回头看看</h1><p>  回首即将过去的2017年，我都做了些什么：</p>
<ul>
<li><p>1.2017年上半年参加市级大学生创新训练项目并获优秀奖</p>
<ul>
<li><p>开发完成“<a href="http://bookzone.wangxuefeng.com.cn" target="_blank" rel="noopener">校园书屋</a>”网站并且小范围内运营了一段时间</p>
<p><img src="https://pub.wangxuefeng.com.cn/asset/blogthumbnail/2017selfSummary/bookzone.png" alt="bookzone"></p>
</li>
</ul>
</li>
<li><p>2.2017年下半年搭建完成自己的个人博客<a href="https://blog.wangxuefeng.com.cn">boXue·Fengke</a></p>
<ul>
<li><p>犹豫了很久，最终决定从一开始的<code>wordpress</code>换为<code>Node.js + Hexo</code>的静态博客系统，并且采用<code>material</code>主题</p>
<p><img src="https://pub.wangxuefeng.com.cn/asset/blogthumbnail/2017selfSummary/blog.png" alt="blog"></p>
</li>
</ul>
</li>
<li><p>3.在大三的课程内容中，完成了计算机图形学的大作业</p>
<ul>
<li><p>基于<code>Vue.js</code> + <code>Canvas 2D</code>的简易画板<a href="http://draw.wangxuefeng.com.cn" target="_blank" rel="noopener">Draw</a></p>
<p><img src="https://pub.wangxuefeng.com.cn/asset/blogthumbnail/2017selfSummary/draw.png" alt="draw"></p>
</li>
</ul>
</li>
<li><p>4.同样在大三的课程内容中，完成了操作系统课程设计</p>
<ul>
<li><p>基于<code>Vue.js</code>的动态页面置换算法<a href="http://pra.wangxuefeng.com.cn" target="_blank" rel="noopener">PRA</a></p>
<p><img src="https://pub.wangxuefeng.com.cn/asset/blogthumbnail/2017selfSummary/pra.png" alt="draw"></p>
</li>
</ul>
</li>
<li><p>5.2017年上半年，开发完成了iYoungon APP，并投入阳光网站内部使用，下半年一直在维护，且已完成了6个版本迭代</p>
<ul>
<li><p>客户端为基于<code>APICloud</code> + <code>Vue.js</code>的Hybrid APP</p>
</li>
<li><p>服务端为基于<code>ThinkPHP 5</code>  +  <code>RESTful API</code>的数据交互系统</p>
<p><img src="https://pub.wangxuefeng.com.cn/asset/blogthumbnail/2017selfSummary/iYoungon.png" alt="iYoungon"></p>
</li>
<li><p><a href="https://pub.wangxuefeng.com.cn/asset/blogthumbnail/2017selfSummary/iYoungonSrc.jpg" target="_blank" rel="noopener">原图</a>[2.29MB]</p>
</li>
</ul>
</li>
</ul>
<h1 id="抬头望望"><a href="#抬头望望" class="headerlink" title="抬头望望"></a>抬头望望</h1><ul>
<li>今天从微博看到一个网站学长的年度自我总结，一个很<code>伤感</code>的总结视频，很有感触，向他学习，希望他能在新的一年突破自己，拍出更好的作品。</li>
</ul>
<ul>
<li><p><a href="http://www.miaopai.com/show/VCAIWccbsP0W7est2wg7~QeMfwQavVXov7YBxA__.htm" target="_blank" rel="noopener">点击此处观看视频</a></p>
</li>
<li><p>也希望我在新的一年里找到自己的方向，不再迷茫。</p>
</li>
<li><p>再见2017，你好2018。</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 流水账 | 总结类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> self-summary </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用分治法和大整数求斐波那契数列的前n项]]></title>
      <url>/archives/feibo.html</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul>
<li>目的：使用 <code>分治法</code> 和 <code>大整数</code> 求斐波那契数列的前n项。</li>
<li>思路：使用数组存储大整数，将求斐波那契数列的第n项转换为求矩阵幂的运算。</li>
<li>公式如下：<br><img src="https://pub.wangxuefeng.com.cn/asset/blogthumbnail/feibo/feibo0.png" alt="function"></li>
</ul>
<h1 id="引用头文件"><a href="#引用头文件" class="headerlink" title="引用头文件"></a>引用头文件</h1><pre class=" language-c"><code class="language-c">    <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
    <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
    <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span>
</code></pre>
<h1 id="定义结构体"><a href="#定义结构体" class="headerlink" title="定义结构体"></a>定义结构体</h1><pre class=" language-c"><code class="language-c">    <span class="token keyword">typedef</span> <span class="token keyword">struct</span> largeNumber<span class="token punctuation">{</span><span class="token comment" spellcheck="true">//大整数结构体    </span>
        <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//大整数的长度</span>
        <span class="token keyword">int</span> <span class="token operator">*</span>number<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用数组存储大整数</span>
    <span class="token punctuation">}</span>largeNum<span class="token punctuation">;</span>

    <span class="token keyword">typedef</span> <span class="token keyword">struct</span> matrix<span class="token punctuation">{</span><span class="token comment" spellcheck="true">//2*2矩阵结构体</span>
        largeNum RowCol00<span class="token punctuation">,</span>RowCol01<span class="token punctuation">,</span>RowCol10<span class="token punctuation">,</span>RowCol11<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//由4个大整数组成</span>
    <span class="token punctuation">}</span>Matrix<span class="token punctuation">;</span>
</code></pre>
<h1 id="函数的声明与定义"><a href="#函数的声明与定义" class="headerlink" title="函数的声明与定义"></a>函数的声明与定义</h1><h2 id="函数声明清单"><a href="#函数声明清单" class="headerlink" title="函数声明清单"></a>函数声明清单</h2><pre class=" language-c"><code class="language-c">
    <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//返回两个整数中较大的值</span>

    <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//返回两个整数中较小的值</span>

    <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//返回两个整数的差的绝对值</span>

    largeNum <span class="token function">largeNumApplyRoom</span><span class="token punctuation">(</span>largeNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//为一个大整数申请空间，使用前必须定义长度</span>

    largeNum <span class="token function">initlargeNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//初始化一个大整数</span>

    largeNum <span class="token function">initlargeNumToZero</span><span class="token punctuation">(</span>largeNum<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//初始化一个定长的大整数且各个数位都为0</span>

    largeNum <span class="token function">formatAddZero</span><span class="token punctuation">(</span>largeNum<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//格式话较短的大整数在其前补0到定长</span>

    largeNum <span class="token function">maxLargeNumLength</span><span class="token punctuation">(</span>largeNum<span class="token punctuation">,</span>largeNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//返回两个大整数中长度较长的大整数</span>

    largeNum <span class="token function">minLargeNumLength</span><span class="token punctuation">(</span>largeNum<span class="token punctuation">,</span>largeNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//返回两个大整数中长度较短的大整数</span>

    largeNum <span class="token function">largeNumAdd</span><span class="token punctuation">(</span>largeNum<span class="token punctuation">,</span>largeNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//大整数的加法运算</span>

    largeNum <span class="token function">largeNumMultiply</span><span class="token punctuation">(</span>largeNum<span class="token punctuation">,</span> largeNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//大整数的乘法运算</span>

    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">largeNumCheckNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//检测大整数进位</span>

    <span class="token keyword">void</span> <span class="token function">largeNumPrintf</span><span class="token punctuation">(</span>largeNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//输出大整数</span>

    Matrix <span class="token function">initMatrix</span><span class="token punctuation">(</span>largeNum<span class="token punctuation">,</span>largeNum<span class="token punctuation">,</span>largeNum<span class="token punctuation">,</span>largeNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//初始化一个2*2的矩阵</span>

    Matrix <span class="token function">matrixMultiply</span><span class="token punctuation">(</span>Matrix<span class="token punctuation">,</span>Matrix<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//定义矩阵的乘法</span>

    Matrix <span class="token function">matrixPower</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//矩阵的幂运算</span>

    <span class="token keyword">void</span> <span class="token function">matrixPrintf</span><span class="token punctuation">(</span>Matrix<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//输出矩阵</span>
</code></pre>
<h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><pre class=" language-c"><code class="language-c">    largeNum <span class="token function">largeNumApplyRoom</span><span class="token punctuation">(</span>largeNum a<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//为一个大整数申请空间，使用前必须定义长度    </span>
        a<span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>

    largeNum <span class="token function">initlargeNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>number<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//初始化一个大整数    </span>
        largeNum a<span class="token punctuation">;</span>        
        a<span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span>    
        a <span class="token operator">=</span> <span class="token function">largeNumApplyRoom</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            
            a<span class="token punctuation">.</span>number<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    
        <span class="token punctuation">}</span>    
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>

    largeNum <span class="token function">initlargeNumToZero</span><span class="token punctuation">(</span>largeNum a<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//初始化一个定长的大整数且各个数位都为0    </span>
        a<span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span>    
        a <span class="token operator">=</span> <span class="token function">largeNumApplyRoom</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            
            a<span class="token punctuation">.</span>number<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    
        <span class="token punctuation">}</span>    
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>

    largeNum <span class="token function">formatAddZero</span><span class="token punctuation">(</span>largeNum a<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//格式话较短的大整数在其前补0到定长    </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;=</span> a<span class="token punctuation">.</span>length <span class="token punctuation">)</span><span class="token punctuation">{</span>    
            <span class="token keyword">return</span> a<span class="token punctuation">;</span>    
        <span class="token punctuation">}</span>    
        largeNum resault<span class="token punctuation">;</span>    
        resault<span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span>    
        resault <span class="token operator">=</span> <span class="token function">initlargeNumToZero</span><span class="token punctuation">(</span>resault<span class="token punctuation">,</span>resault<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> length<span class="token number">-1</span><span class="token punctuation">,</span>j <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    
            resault<span class="token punctuation">.</span>number<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">.</span>number<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    
        <span class="token punctuation">}</span>    
        <span class="token keyword">return</span> resault<span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//返回两个整数中较大的值    </span>
        <span class="token keyword">return</span> a <span class="token operator">>=</span> b <span class="token operator">?</span> a <span class="token punctuation">:</span> b <span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>    

    <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//返回两个整数中较小的值    </span>
        <span class="token keyword">return</span> a <span class="token operator">&lt;=</span> b <span class="token operator">?</span> a <span class="token punctuation">:</span> b <span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//返回两个整数的差的绝对值    </span>
        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>

    largeNum <span class="token function">maxLargeNumLength</span><span class="token punctuation">(</span>largeNum a<span class="token punctuation">,</span>largeNum b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//返回两个大整数中长度较长的大整数    </span>
        <span class="token keyword">return</span> a<span class="token punctuation">.</span>length <span class="token operator">>=</span> b<span class="token punctuation">.</span>length<span class="token operator">?</span> a <span class="token punctuation">:</span> b <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    largeNum <span class="token function">minLargeNumLength</span><span class="token punctuation">(</span>largeNum a<span class="token punctuation">,</span>largeNum b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//返回两个大整数中长度较短的大整数    </span>
        <span class="token keyword">return</span> a<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> b<span class="token punctuation">.</span>length<span class="token operator">?</span> a <span class="token punctuation">:</span> b <span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>

    largeNum <span class="token function">largeNumAdd</span><span class="token punctuation">(</span>largeNum a<span class="token punctuation">,</span>largeNum b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//大整数的加法运算    </span>
        largeNum sum<span class="token punctuation">;</span>    
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">==</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>    
            sum<span class="token punctuation">.</span>length <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    
            sum <span class="token operator">=</span> <span class="token function">initlargeNumToZero</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span>sum<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    
                sum<span class="token punctuation">.</span>number<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span> b<span class="token punctuation">.</span>number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum<span class="token punctuation">.</span>number<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    
                    sum<span class="token punctuation">.</span>number<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span>  <span class="token punctuation">(</span>sum<span class="token punctuation">.</span>number<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
                    sum<span class="token punctuation">.</span>number<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    
                <span class="token punctuation">}</span>                
            <span class="token punctuation">}</span>    
            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    
            <span class="token keyword">return</span> <span class="token function">largeNumAdd</span><span class="token punctuation">(</span><span class="token function">formatAddZero</span><span class="token punctuation">(</span><span class="token function">minLargeNumLength</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length<span class="token punctuation">,</span>b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">maxLargeNumLength</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>    
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">largeNumCheckNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//检测大整数进位    </span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> length<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    
            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    
                a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    
            <span class="token punctuation">}</span>    
        <span class="token punctuation">}</span>        
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    
                <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>    
                b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
                b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>
                b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>    
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    
                    b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    
                <span class="token punctuation">}</span>    
                <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    
                <span class="token keyword">return</span> b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>

    largeNum <span class="token function">largeNumMultiply</span><span class="token punctuation">(</span>largeNum a<span class="token punctuation">,</span> largeNum b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//大整数的乘法    </span>
        largeNum product<span class="token punctuation">;</span>    
        product<span class="token punctuation">.</span>length <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">+</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    
        <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>tempProduct<span class="token punctuation">;</span>    
        tempProduct <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    
            tempProduct<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token punctuation">}</span>    
        product <span class="token operator">=</span> <span class="token function">initlargeNumToZero</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span>product<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> b<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                
                tempProduct<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">.</span>number<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">.</span>number<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    
                product<span class="token punctuation">.</span>number<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> tempProduct<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    
            <span class="token punctuation">}</span>    
        <span class="token punctuation">}</span>

        product<span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token function">largeNumCheckNum</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span>number<span class="token punctuation">,</span>product<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token keyword">return</span> product<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">largeNumPrintf</span><span class="token punctuation">(</span>largeNum a<span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token comment" spellcheck="true">//输出大整数    </span>
        <span class="token keyword">int</span> sign <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    
            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>number<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    
                sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>sign<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> a<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>    
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>    
                <span class="token keyword">continue</span><span class="token punctuation">;</span>    
            <span class="token punctuation">}</span>    
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token punctuation">}</span>    
    <span class="token punctuation">}</span>

    Matrix <span class="token function">initMatrix</span><span class="token punctuation">(</span>largeNum a<span class="token punctuation">,</span>largeNum b<span class="token punctuation">,</span>largeNum c<span class="token punctuation">,</span>largeNum d<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//初始化一个2*2的矩阵</span>
        Matrix matrix<span class="token punctuation">;</span>    
        matrix<span class="token punctuation">.</span>RowCol00 <span class="token operator">=</span> a<span class="token punctuation">;</span>
        matrix<span class="token punctuation">.</span>RowCol01 <span class="token operator">=</span> b<span class="token punctuation">;</span>
        matrix<span class="token punctuation">.</span>RowCol10 <span class="token operator">=</span> c<span class="token punctuation">;</span>
        matrix<span class="token punctuation">.</span>RowCol11 <span class="token operator">=</span> d<span class="token punctuation">;</span>    
        <span class="token keyword">return</span> matrix<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">matrixPrintf</span><span class="token punctuation">(</span>Matrix a<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//输出矩阵    </span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">largeNumPrintf</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>RowCol00<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">largeNumPrintf</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>RowCol01<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">largeNumPrintf</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>RowCol10<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">largeNumPrintf</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>RowCol11<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"| "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>

    Matrix <span class="token function">matrixMultiply</span><span class="token punctuation">(</span>Matrix a<span class="token punctuation">,</span>Matrix b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//定义矩阵的乘法    </span>
        Matrix product<span class="token punctuation">;</span>    
        product<span class="token punctuation">.</span>RowCol00 <span class="token operator">=</span> <span class="token function">largeNumAdd</span><span class="token punctuation">(</span><span class="token function">largeNumMultiply</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>RowCol00<span class="token punctuation">,</span>b<span class="token punctuation">.</span>RowCol00<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">largeNumMultiply</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>RowCol01<span class="token punctuation">,</span>b<span class="token punctuation">.</span>RowCol10<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        product<span class="token punctuation">.</span>RowCol01 <span class="token operator">=</span> <span class="token function">largeNumAdd</span><span class="token punctuation">(</span><span class="token function">largeNumMultiply</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>RowCol00<span class="token punctuation">,</span>b<span class="token punctuation">.</span>RowCol01<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">largeNumMultiply</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>RowCol01<span class="token punctuation">,</span>b<span class="token punctuation">.</span>RowCol11<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        product<span class="token punctuation">.</span>RowCol10 <span class="token operator">=</span> <span class="token function">largeNumAdd</span><span class="token punctuation">(</span><span class="token function">largeNumMultiply</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>RowCol10<span class="token punctuation">,</span>b<span class="token punctuation">.</span>RowCol00<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">largeNumMultiply</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>RowCol11<span class="token punctuation">,</span>b<span class="token punctuation">.</span>RowCol10<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        product<span class="token punctuation">.</span>RowCol11 <span class="token operator">=</span> <span class="token function">largeNumAdd</span><span class="token punctuation">(</span><span class="token function">largeNumMultiply</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>RowCol10<span class="token punctuation">,</span>b<span class="token punctuation">.</span>RowCol01<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">largeNumMultiply</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>RowCol11<span class="token punctuation">,</span>b<span class="token punctuation">.</span>RowCol11<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token keyword">return</span> product<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    Matrix <span class="token function">matrixPower</span><span class="token punctuation">(</span>matrix a<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//定义矩阵的幂运算，这里用到了分治思想    </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    
            <span class="token keyword">return</span> a<span class="token punctuation">;</span>    
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    
            <span class="token keyword">return</span> <span class="token function">matrixMultiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    
            <span class="token keyword">return</span> <span class="token function">matrixMultiply</span><span class="token punctuation">(</span><span class="token function">matrixPower</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">matrixPower</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    
            <span class="token keyword">return</span> <span class="token function">matrixMultiply</span><span class="token punctuation">(</span><span class="token function">matrixMultiply</span><span class="token punctuation">(</span><span class="token function">matrixPower</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">matrixPower</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
</code></pre>
<h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><pre class=" language-c"><code class="language-c">
    <span class="token keyword">void</span> <span class="token function">feibonaqi</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
        largeNum a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">;</span>
        Matrix resault<span class="token punctuation">;</span>
        <span class="token keyword">int</span> Anumber<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> Bnumber<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> Cnumber<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> Dnumber<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        a <span class="token operator">=</span> <span class="token function">initlargeNumber</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>Anumber<span class="token punctuation">)</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token function">initlargeNumber</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>Bnumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
        c <span class="token operator">=</span> <span class="token function">initlargeNumber</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>Cnumber<span class="token punctuation">)</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token function">initlargeNumber</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>Dnumber<span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token comment" spellcheck="true">//初始化四个大整数1，1，1，0  </span>
        Matrix matrix <span class="token operator">=</span> <span class="token function">initMatrix</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token comment" spellcheck="true">//初始化矩阵</span>
        resault <span class="token operator">=</span> <span class="token function">matrixPower</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//计算矩阵的（n-1）次方</span>
        <span class="token function">matrixPrintf</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"^"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(%d-1)\t"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"=\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">matrixPrintf</span><span class="token punctuation">(</span>resault<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//输出结果矩阵</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"f(%d)="</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">largeNumPrintf</span><span class="token punctuation">(</span>resault<span class="token punctuation">.</span>RowCol00<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//输出斐波那契数列第n项结果</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> maxI<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input a number to be max item:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>maxI<span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxI<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">feibonaqi</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<h1 id="测试截图"><a href="#测试截图" class="headerlink" title="测试截图"></a>测试截图</h1><p><img src="https://pub.wangxuefeng.com.cn/asset/blogthumbnail/feibo/feibo1.png" alt="feibo"></p>
<p><img src="https://pub.wangxuefeng.com.cn/asset/blogthumbnail/feibo/feibo2.png" alt="feibo"></p>
]]></content>
      
        <categories>
            
            <category> 技术贴 | 算法类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[多种语言输出Hello World]]></title>
      <url>/archives/hello-world.html</url>
      <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h1 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h1><pre class=" language-c++"><code class="language-c++">cout<<"Hello World";
</code></pre>
<h1 id="QBasic"><a href="#QBasic" class="headerlink" title="QBasic"></a>QBasic</h1><pre class=" language-qb"><code class="language-qb">Print "Hello World"
</code></pre>
<h1 id="ASP"><a href="#ASP" class="headerlink" title="ASP"></a>ASP</h1><pre class=" language-asp"><code class="language-asp">Response.Write "Hello World"
</code></pre>
<h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><pre class=" language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>
</code></pre>
<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><pre class=" language-javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h1 id="VBScript"><a href="#VBScript" class="headerlink" title="VBScript"></a>VBScript</h1><pre class=" language-vbScript"><code class="language-vbScript">MsgBox "Hello World"
</code></pre>
<h1 id="Delphi"><a href="#Delphi" class="headerlink" title="Delphi"></a>Delphi</h1><pre class=" language-delphi"><code class="language-delphi">ShowMessage('Hello World！');
</code></pre>
<h1 id="VB"><a href="#VB" class="headerlink" title="VB"></a>VB</h1><pre class=" language-vb"><code class="language-vb">Print "Hello World！"
MessageBox("Hello World！");
</code></pre>
<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><pre class=" language-shell"><code class="language-shell">echo Hello World
</code></pre>
<h1 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h1><pre class=" language-perl"><code class="language-perl"><span class="token keyword">print</span> <span class="token string">'Hello World'</span>
</code></pre>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h1 id="PowerBuilder"><a href="#PowerBuilder" class="headerlink" title="PowerBuilder:"></a>PowerBuilder:</h1><pre class=" language-powerBuilder:"><code class="language-powerBuilder:">messagebox（"Hello World")
</code></pre>
<h1 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a><code>C#</code></h1><pre class=" language-c#"><code class="language-c#">System.Console.WriteLine("Hello World")
</code></pre>
<h1 id="COBOL"><a href="#COBOL" class="headerlink" title="COBOL"></a>COBOL</h1><pre class=" language-cobol"><code class="language-cobol">DISPLAY 'Hello World'
</code></pre>
<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span>
</code></pre>
<h1 id="AS"><a href="#AS" class="headerlink" title="AS"></a>AS</h1><pre class=" language-as"><code class="language-as">Alert.show("Hello World");
</code></pre>
<h1 id="Foxpro"><a href="#Foxpro" class="headerlink" title="Foxpro"></a>Foxpro</h1><pre class=" language-foxpro"><code class="language-foxpro">? [Hello World]
</code></pre>
<h1 id="DOS-批处理"><a href="#DOS-批处理" class="headerlink" title="DOS 批处理"></a>DOS 批处理</h1><pre class=" language-dos"><code class="language-dos">echo Hello World
</code></pre>
<h1 id="易语言"><a href="#易语言" class="headerlink" title="易语言"></a>易语言</h1><pre class=" language-易语言"><code class="language-易语言">调试输出("Hello World"）
</code></pre>
<h1 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h1><pre class=" language-golang"><code class="language-golang">fmt.Println("Hello World")
</code></pre>
<h1 id="Matlab"><a href="#Matlab" class="headerlink" title="Matlab"></a>Matlab</h1><pre class=" language-matlab"><code class="language-matlab"><span class="token function">disp</span><span class="token punctuation">(</span><span class="token string">'Hello,World!'</span><span class="token operator">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h1 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h1><pre class=" language-ruby"><code class="language-ruby"> puts <span class="token string">"hello wold!"</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> 技术贴 | 总结类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> start </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[gallery]]></title>
      <url>/gallery/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[About-me]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<ul>
<li><p>雪峰 | Xuefeng</p>
</li>
<li><p>本科 计算机科学与技术专业</p>
</li>
<li><p>性格比较内向，不善主动交际</p>
</li>
<li><p>喜欢民谣、古风、动漫</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[友情链接]]></title>
      <url>/links/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[标签云]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[不念过往 不畏将来]]></title>
      <url>/timeline/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
